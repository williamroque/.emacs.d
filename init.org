# -*- coding: utf-8 -*-

#+startup: overview
#+property: header-args :results silent
#+dfree: nil

#+title: Emacs Config

Welcome to my Emacs config! Emacs is a beautiful piece of software
that allows you control over virtually every aspect of itself.
Typically, I only change what bothers me. As I'm sure you'll find,
however, that's quite a bit.

I cannot guarantee that this will work on your machine out of the
box. If you're on a Mac, however, copying the entire =.emacs.d=
directory should work.

#+TOC: headlines 2

* Startup

** Setup

Personal information.

#+begin_src emacs-lisp :tangle yes
(setq-default user-full-name "William Aguiar Roque")
(setq-default user-mail-address "william.aroque@gmail.com")
#+end_src

Add package repositories.

#+begin_src emacs-lisp :tangle yes
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")
             '("melpa-stable" . "https://stable.melpa.org/packages/"))
(package-initialize)
#+end_src

#+begin_src emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  (eval-when-compile (require 'use-package)))
#+end_src

Make sure all packages are ensured by default.

#+begin_src emacs-lisp :tangle yes
(setq-default use-package-always-ensure t)
#+end_src

Make sure environment variables are set up properly.

#+begin_src emacs-lisp :tangle yes
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src

Set garbage collection threshold to a more reasonable value.

#+begin_src emacs-lisp :tangle yes
(setq-default gc-cons-threshold (* 8 1024 1024))
#+end_src

Set default directory to home

#+begin_src emacs-lisp :tangle yes
(setq default-directory (concat (getenv "HOME") "/"))
#+end_src

Remove startup screen

#+begin_src emacs-lisp :tangle yes
(setq-default inhibit-startup-screen t)
#+end_src

Stop showing "when done with this frame..."

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load "server"
  (defun server-execute (proc files nowait commands dontkill frame tty-name)
    ;; This is run from timers and process-filters, i.e. "asynchronously".
    ;; But w.r.t the user, this is not really asynchronous since the timer
    ;; is run after 0s and the process-filter is run in response to the
    ;; user running `emacsclient'.  So it is OK to override the
    ;; inhibit-quit flag, which is good since `commands' (as well as
    ;; find-file-noselect via the major-mode) can run arbitrary code,
    ;; including code that needs to wait.
    (with-local-quit
      (condition-case err
          (let ((buffers (server-visit-files files proc nowait)))
            (mapc 'funcall (nreverse commands))
            ;; If we were told only to open a new client, obey
            ;; `initial-buffer-choice' if it specifies a file
            ;; or a function.
            (unless (or files commands)
              (let ((buf
                     (cond ((stringp initial-buffer-choice)
                            (find-file-noselect initial-buffer-choice))
                           ((functionp initial-buffer-choice)
                            (funcall initial-buffer-choice)))))
                (switch-to-buffer
                 (if (buffer-live-p buf) buf (get-buffer-create "*scratch*"))
                 'norecord)))

            ;; Delete the client if necessary.
            (cond
             (nowait
              ;; Client requested nowait; return immediately.
              (server-log "Close nowait client" proc)
              (server-delete-client proc))
             ((and (not dontkill) (null buffers))
              ;; This client is empty; get rid of it immediately.
              (server-log "Close empty client" proc)
              (server-delete-client proc)))
            (cond
             ((or isearch-mode (minibufferp))
              nil)
             ((and frame (null buffers))
              (run-hooks 'server-after-make-frame-hook))
             ((not (null buffers))
              (run-hooks 'server-after-make-frame-hook)
              (server-switch-buffer (car buffers) nil (cdr (car files)))
              (run-hooks 'server-switch-hook)
              (unless nowait)))
            (when (and frame (null tty-name))
              (server-unselect-display frame)))
        ((quit error)
         (when (eq (car err) 'quit)
           (message "Quit emacsclient request"))
         (server-return-error proc err))))))

#+end_src

Make sure customization is saved to desktop instead of =.emacs.d=.

#+begin_src emacs-lisp :tangle yes
(setq-default custom-file "~/Desktop/custom.el")
#+end_src

Make sure Emacs uses UTF-8.

#+begin_src emacs-lisp :tangle yes
(setq-default locale-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

Stop showing sentinel exit messages with =async-shell-command=.

#+begin_src emacs-lisp :tangle yes
(defun shell-command-sentinel (process signal)
  (when (memq (process-status process) '(exit signal))
    (shell-command-set-point-after-cmd (process-buffer process))
    (let ((inhibit-message t))
      (message "%s: %s."
             (car (cdr (cdr (process-command process))))
             (substring signal 0 -1)))))
#+end_src

** Scratch

Remove initial message from scratch buffer.

#+begin_src emacs-lisp :tangle yes
(setq-default initial-scratch-message "")
#+end_src

Use org mode in scratch buffer by default.

#+begin_src emacs-lisp :tangle yes
(setq initial-major-mode 'org-mode)
#+end_src

Toggle org mode.

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'org
  (define-key lisp-interaction-mode-map (kbd "C-c t") 'org-mode)
  (define-key org-mode-map (kbd "C-c t") 'lisp-interaction-mode))
#+end_src

Kill all buffers except for scratch.

#+begin_src emacs-lisp :tangle yes
(defun kill-all-buffers-except-scratch ()
  "Kill all buffers except for *scratch*."
  (interactive)
  (mapc 'kill-buffer 
        (delete (get-buffer "*scratch*") (buffer-list)))
  (message "Killed all buffers except *scratch*."))
#+end_src

Use =scratch= extension to open new language-specific scratch buffers.

#+begin_src emacs-lisp :tangle yes
(use-package scratch
  :config
  (global-set-key (kbd "C-c s") #'scratch))
#+end_src

Evil leader keybindings.

#+begin_src emacs-lisp :tangle no :noweb-ref scratch-leader
;; create scratch buffer
(evil-leader/set-key "b" #'(lambda () (interactive) (switch-to-buffer "*scratch*")))


;; make the scratch buffer the only one
(evil-leader/set-key "B" 'kill-all-buffers-except-scratch)
#+end_src

* Utilities

#+begin_src emacs-lisp :tangle yes
;; for debugging lists
(defun print-elements-of-list (list)
  "Print each element of LIST on a line of its own."
  (while list
    (print (car list))
    (setq list (cdr list))))


;; to add after index of list
(defun insert-after (lst index newelt)
  (push newelt (cdr (nthcdr index lst))) 
  lst)


;; easy way to wrap function for keyboard shortcut
(defun wrap-fun (fun &rest args)
  `(lambda ()
    (interactive)
    (apply #',fun ',args)))
#+end_src

* User interface

General UI config.

#+begin_src emacs-lisp :tangle yes
;; colorscheme stuff
(defvar ansi-color-names-vector
  ["#3c3836" "#fb4933" "#b8bb26" "#fabd2f" "#83a598" "#d3869b" "#8ec07c" "#ebdbb2"])
(defvar pdf-view-midnight-colors '("#fdf4c1" . "#1d2021"))


;; set theme
(use-package doom-themes
  :config
  (load-theme 'doom-tomorrow-night t))
#+end_src

** Theme

Colors.

#+begin_src emacs-lisp :tangle yes
(defconst color-background        "#121112")
(defconst color-light-background  "#1D1F21")
(defconst color-foreground        "#FDF4C1")
(defconst color-light-subdued     "#EBDBB2")
(defconst color-dark-subdued      "#313533")
(defconst color-darkish-subdued   "#515553")
(defconst color-medium-subdued    "#717171")
(defconst color-red               "#CC6666")
(defconst color-light-red         "#886950")
(defconst color-orange            "#FE8019")
(defconst color-light-orange      "#F0C674")
(defconst color-green             "#6CA17A")
(defconst color-light-green       "#B5BD68")
(defconst color-yellow            "#E0DBA9")
(defconst color-blue              "#81A2BE")
(defconst color-light-blue        "#41728E")
(defconst color-brown             "#BD9977")
(defconst color-dark-brown        "#605846")
#+end_src

Faces.

#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'default nil
                    :weight 'medium
                    :height 140
                    :width 'normal
                    :family "Victor Mono"
                    :background color-background
                    :foreground "#fdf4c1")


(set-face-attribute 'fixed-pitch nil
                    :family "Victor Mono"
                    :height 140)


(set-face-attribute 'variable-pitch nil
                    :family "Optima"
                    :height 160)


(set-face-attribute 'font-lock-preprocessor-face nil
                    :inherit 'bold
                    :foreground color-light-red)


(set-face-attribute 'mode-line nil
                    :box nil
                    :background "#121112"
                    :foreground color-light-subdued)


(set-face-attribute 'mode-line-buffer-id nil
                    :weight 'bold)


(set-face-attribute 'mode-line-inactive nil
                    :box nil
                    :background color-light-background
                    :foreground color-light-subdued)


(set-face-attribute 'font-lock-keyword-face nil
                    :weight 'bold
                    :foreground color-red)


(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)


(set-face-attribute 'font-lock-function-name-face nil
                    :foreground color-green)


(set-face-attribute 'font-lock-constant-face nil
                    :foreground color-red)


(set-face-attribute 'font-lock-variable-name-face nil
                    :foreground color-yellow)


(set-face-attribute 'font-lock-type-face nil
                    :foreground color-green)


(set-face-attribute 'lazy-highlight nil 
                    :weight 'normal
                    :background color-light-blue
                    :foreground color-foreground)


(set-face-attribute 'line-number nil
                    :background color-background)


(set-face-attribute 'line-number-current-line nil
                    :background color-background
                    :foreground color-orange)


(set-face-attribute 'shadow nil
                    :foreground color-dark-subdued)


(with-eval-after-load 'hl-line
  (set-face-attribute 'hl-line nil
                      :background "#1e1e1e"))
#+end_src

** Line numbers

Set hybrid line numbers.

#+begin_src emacs-lisp :tangle yes
(defun toggle-line-numbers ()
  "Toggle line numbers."
  (interactive)
  (setq-local display-line-numbers
              (if (equal display-line-numbers nil) 'relative nil)))


(add-hook 'prog-mode-hook #'toggle-line-numbers)
(add-hook 'LaTeX-mode-hook #'toggle-line-numbers)
#+end_src

Added option for temporary line numbers.

#+begin_src emacs-lisp :tangle yes
(defvar began-line-toggle nil
  "Whether line numbers have currently been toggled.")


(defun cautious-line-toggle ()
  "Toggle line numbers temporarily if began-line-toggle is nil"
  (interactive)
  (if (and (not began-line-toggle) (not (derived-mode-p 'prog-mode)))
      (progn
        (toggle-line-numbers)
        (setq began-line-toggle t))))


;; show line numbers when using numerical prefix 
;; (add-hook 'prefix-command-preserve-state-hook #'cautious-line-toggle)


(add-hook 'pre-command-hook #'(lambda ()
                                (interactive)
                                (if began-line-toggle
                                    (progn
                                      (toggle-line-numbers)
                                      (setq began-line-toggle nil)))))
#+end_src

Hide line numbers for term.

#+begin_src emacs-lisp :tangle yes
(add-hook 'term-mode-hook (lambda () (setq-local display-line-numbers nil)))
#+end_src

Evil leader key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref line-number-leader
(evil-leader/set-key "N" #'cautious-line-toggle)
#+end_src

** Window/frame

Clean interface.

#+begin_src emacs-lisp :tangle yes
;; remove menu and tool bar
(tool-bar-mode -1)
(menu-bar-mode -1)


;; remove scrollbar
(toggle-scroll-bar -1)


;; remove title
(defun erase-title ()
  (setq frame-title-format
        (if (equal frame-title-format "") "\n" "")))

(run-with-timer 0 5 #'erase-title)
#+end_src

Resize frame natively (cf. by columns/rows).

#+begin_src emacs-lisp :tangle yes
(setq-default frame-resize-pixelwise t)
#+end_src

Set margins.

#+begin_src emacs-lisp :tangle yes
(fringe-mode 0)
(setq-default left-margin-width 2)
(setq-default right-margin-width 2)
#+end_src

Hide macOS "frame".

#+begin_src emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))

(setq-default ns-use-proxy-icon nil)
#+end_src

Set default frame size.

#+begin_src emacs-lisp :tangle yes
(if (window-system) (set-frame-size (selected-frame) 110 30))
#+end_src

Raise frame by default.

#+begin_src emacs-lisp :tangle yes
(add-hook 'server-switch-hook (lambda () (select-frame-set-input-focus (selected-frame))))
#+end_src

Make sure client loading doesn't make Emacs forget this whole
configuration thing ever happened.

#+begin_src emacs-lisp :tangle yes
(defvar default-frame-height 30)
(defvar default-frame-width 110)

(defvar default-frame-pixel-height nil)
(defvar default-frame-pixel-width nil)


(add-to-list 'after-make-frame-functions
             #'(lambda (frame)
                 (when (or (not default-frame-pixel-height) (not default-frame-width))
                   (setq-default default-frame-pixel-height (frame-outer-height frame))
                   (setq-default default-frame-pixel-width (frame-outer-width frame)))))


(add-hook 'before-make-frame-hook
          #'(lambda ()
              (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
              (add-to-list 'default-frame-alist `(height . ,default-frame-height))
              (add-to-list 'default-frame-alist `(width  . ,default-frame-width))))
#+end_src

Center window.

#+begin_src emacs-lisp :tangle yes
(defvar center-frame-vertical-offset 28)
(defvar should-center-frame t)


(defun center-frame (frame)
  (if should-center-frame
      (set-frame-position frame
                          (- (round (/ (display-pixel-width) 2)) (round (/ (frame-outer-width) 2)))
                          (- (round (/ (display-pixel-height) 2))
                             (round (/ (frame-outer-height) 2))
                             center-frame-vertical-offset))))

(add-to-list 'after-make-frame-functions #'center-frame)
#+end_src

Close current window (vim-style).

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "M-w") 'evil-quit)
#+end_src

Navigate between windows (splits).

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "M-h") 'evil-window-left)
(global-set-key (kbd "M-j") 'evil-window-down)
(global-set-key (kbd "M-k") 'evil-window-up)
(global-set-key (kbd "M-l") 'evil-window-right)
#+end_src

Autoselect window with mouse on it

#+begin_src emacs-lisp :tangle yes
(setq-default mouse-autoselect-window nil)
#+end_src

Split vertically by default.

#+begin_src emacs-lisp :tangle yes
(setq-default split-width-threshold 0)
(setq-default split-height-threshold nil)
#+end_src

Transpose frame.

#+begin_src emacs-lisp :tangle yes
(use-package transpose-frame)
#+end_src

Resize window more easily.

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c w") #'evil-window-set-width)
(global-set-key (kbd "C-c h") #'evil-window-set-height)
#+end_src

Evil leader keybindings.

#+begin_src emacs-lisp :tangle no :noweb-ref window-frame-leader
;; open non-fullscreen window
(evil-leader/set-key (kbd "-") (lambda ()
                                 (interactive)
                                 (make-frame `((left . ,(- (round (/ (display-pixel-width) 2))
                                                           (round (/ default-frame-pixel-width 2))))
                                               (top . ,(- (round (/ (display-pixel-height) 2))
                                                          (round (/ default-frame-pixel-height 2))
                                                          center-frame-vertical-offset))))
                                 (run-at-time .2 nil (lambda ()
                                                       (set-frame-parameter nil 'fullscreen nil)))))


;; switch frames easily
(evil-leader/set-key "O" #'other-frame)


;; balance out window sizes
(evil-leader/set-key "W" #'balance-windows)


;; recenter frame
(evil-leader/set-key "0" #'(lambda ()
                             (interactive)
                             (set-frame-parameter nil 'width default-frame-width)
                             (set-frame-parameter nil 'height default-frame-height)
                             (center-frame (selected-frame))))


;; quit emacs -- shouldn't technically be here
(evil-leader/set-key (kbd "q") (lambda ()
                                 (interactive)
                                 (kill-all-buffers-except-scratch)
                                 (when (yes-or-no-p "Truly really truly quit Emacs? ")
                                   (kill-emacs))))


;; transpose frame
(define-key global-map (kbd "M-t") 'transpose-frame)
#+end_src

** Mode line

Mode line config.

#+begin_src emacs-lisp :tangle no :noweb-ref mode-line-config
(mood-line-mode)

(setq-default display-time-default-load-average nil)
(setq-default display-time-day-and-date t)
(setq-default display-time-format "%H:%M")
(display-time)
#+end_src

Custom faces.

#+begin_src emacs-lisp :tangle no :noweb-ref mood-line-faces
(set-face-attribute 'mood-line-buffer-name nil
                    :inherit 'mode-line-buffer-id
                    :foreground "#ebdbb2")


(set-face-attribute 'mood-line-major-mode nil
                    :inherit 'bold
                    :foreground "#ebdbb2")


(set-face-attribute 'mood-line-modified nil
                    :foreground "#ebdbb2")


(set-face-attribute 'mood-line-status-error nil
                    :foreground "#ebdbb2")


(set-face-attribute 'mood-line-status-info nil
                    :foreground "#ebdbb2")


(set-face-attribute 'mood-line-status-neutral nil
                    :foreground "#ebdbb2")


(set-face-attribute 'mood-line-status-success nil
                    :foreground "#ebdbb2")


(set-face-attribute 'mood-line-status-warning nil
                    :foreground "#ebdbb2")


(set-face-attribute 'mood-line-unimportant nil
                    :foreground "#ebdbb2")
#+end_src

#+begin_src emacs-lisp :tangle yes :noweb no-export
(use-package mood-line
  :config
  <<mode-line-config>>
  <<mood-line-faces>>)
#+end_src

** Encoding

Sort of inelegant (but seemingly standard) way of adding ligature
support.

#+begin_src emacs-lisp :tangle yes
(let ((alist `((?! . ,(regexp-opt '("!!" "!=" "!==")))
               (?# . ,(regexp-opt '("##" "###" "####" "#(" "#?" "#[" "#_" "#_(" "#{")))
               (?$ . ,(regexp-opt '("$>")))
               (?% . ,(regexp-opt '("%%")))
               (?& . ,(regexp-opt '("&&")))
               (?* . ,(regexp-opt '("*" "**" "***" "**/" "*/" "*>")))
               (?+ . ,(regexp-opt '("+" "++" "+++" "+>")))
               (?- . ,(regexp-opt '("--" "---" "-->" "-<" "-<<" "->" "->>" "-}" "-~")))
               (?. . ,(regexp-opt '(".-" ".." "..." "..<" ".=")))
               (?/ . ,(regexp-opt '("/*" "/**" "//" "///" "/=" "/==" "/>")))
               (?: . ,(regexp-opt '(":" "::" ":::" ":=")))
               (?\; . ,(regexp-opt '(";;")))
               (?< . ,(regexp-opt '("<!--" "<$" "<$>" "<*" "<*>" "<+" "<+>" "<-" "<--" "<->" "</" "</>" "<<" "<<-" "<<<" "<<=" "<=" "<=" "<=<" "<==" "<=>" "<>" "<|" "<|>" "<~" "<~~")))
               (?= . ,(regexp-opt '("=/=" "=:=" "=<<" "==" "===" "==>" "=>" "=>>")))
               (?> . ,(regexp-opt '(">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>")))
               (?? . ,(regexp-opt '("??" "?=")))
               (?\[ . ,(regexp-opt '("[]")))
               (?\\ . ,(regexp-opt '("\\\\" "\\\\\\")))
               (?^ . ,(regexp-opt '("^=")))
               (?w . ,(regexp-opt '("www")))
               (?x . ,(regexp-opt '("x")))
               (?{ . ,(regexp-opt '("{-")))
               (?| . ,(regexp-opt '("|=" "|>" "||" "||=")))
               (?~ . ,(regexp-opt '("~-" "~=" "~>" "~@" "~~" "~~>")))
               ;;;(?F . ,(regexp-opt '("F_vec")))
               )))
  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+end_src

Use fira code for Greek letters in vterm.

#+begin_src emacs-lisp :tangle yes
(add-hook 'vterm-mode-hook (lambda ()
                             (set-fontset-font (face-attribute 'default :fontset)
                                               '(#x0370 . #x03FF) (font-spec :family "Fira Code") nil 'prepend)))
#+end_src

** Prettify symbols

#+begin_src emacs-lisp :tangle yes
(defun add-visual-replacement (from to)
  "Make `prettify-symbols-mode' replace string FROM with string TO.

Updates `prettify-symbols-alist'.  You may need to toggle
`prettify-symbols-mode' to make the changes take effect.

Each character of TO is vertically aligned using the baseline,
such that base-left of the character is aligned with base-right
of the preceding character.  Refer to `reference-point-alist'
for more information."
  (push (cons from (let ((composition nil))
                     (dolist (char (string-to-list to)
                                   (nreverse (cdr composition)))
                       (push char composition)
                       (push '(Br . Bl) composition))))
        prettify-symbols-alist))


(add-hook 'org-mode-hook (lambda ()
                           (add-visual-replacement "---" "──")

                           (push '("\\sqrt" . "√") prettify-symbols-alist)

                           (push '("\\text" . "​") prettify-symbols-alist)

                           (push '("\\left(" . "(") prettify-symbols-alist)
                           (push '("\\right)" . ")") prettify-symbols-alist)
                           (add-visual-replacement "\\right)^2" ")²")
                           (add-visual-replacement "\\right)^3" ")³")

                           (push '("\\left|" . "|") prettify-symbols-alist)
                           (push '("\\right|" . "|") prettify-symbols-alist)
                           (add-visual-replacement "\\right|^2" "|²")
                           (add-visual-replacement "\\right|^3" "|³")

                           (push '("\\left[" .  "[") prettify-symbols-alist)
                           (push '("\\right]" . "]") prettify-symbols-alist)
                           (add-visual-replacement "\\right]^2" "]²")
                           (add-visual-replacement "\\right]^3" "]³")

                           (add-visual-replacement "\\left\\Vert" "||")
                           (add-visual-replacement "\\right\\Vert" "||")

                           (push '("\\vecb{a}" . "𝒂") prettify-symbols-alist)
                           (push '("\\vecb{b}" . "𝒃") prettify-symbols-alist)
                           (push '("\\vecb{c}" . "𝒄") prettify-symbols-alist)
                           (push '("\\vecb{u}" . "𝒖") prettify-symbols-alist)
                           (push '("\\vecb{v}" . "𝒗") prettify-symbols-alist)

                           (push '("\\left\\langle" .  "〈") prettify-symbols-alist)
                           (push '("\\right\\rangle" .  "〉") prettify-symbols-alist)
                           (push '("[ ]" .  "☐") prettify-symbols-alist)
                           (push '("[X]" . "☑" ) prettify-symbols-alist)
                           (push '("[-]" . "❍" ) prettify-symbols-alist)
                           (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
                           (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
                           (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
                           (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
                           (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
                           (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)
                           (push '("#+BEGIN_VERSE" . "↦" ) prettify-symbols-alist)
                           (push '("#+END_VERSE" . "⇤" ) prettify-symbols-alist)
                           (push '("#+begin_verse" . "↦" ) prettify-symbols-alist)
                           (push '("#+end_verse" . "⇤" ) prettify-symbols-alist)
                           (push '("#+begin_quote" . "↦" ) prettify-symbols-alist)
                           (push '("#+end_quote" . "⇤" ) prettify-symbols-alist)
                           (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
                           (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
                           (push '("#+begin_src" . "↦" ) prettify-symbols-alist)
                           (push '("#+end_src" . "⇤" ) prettify-symbols-alist)
                           (push '("#+title: " . "​" ) prettify-symbols-alist)
                           (prettify-symbols-mode)))
#+end_src

* Evil

Set all the necessary init variables.

#+begin_src emacs-lisp :tangle no :noweb-ref evil-variables
(setq-default evil-want-keybinding nil)         ; evil-collection compatibility
(setq-default evil-search-module 'evil-search)  ; use vim-style searching
(setq-default evil-undo-system 'undo-tree)      ; use better undo system based on vim
(setq-default evil-vsplit-window-right t)       ; split right
(setq-default evil-split-window-below t)        ; split down


;; new digraphs
(setq-default evil-digraphs-table-user '(((?r ?a) . ?\x2192)
                                         ((?  ? ) . ?\x200b)
                                         ((?t ?h) . ?\x03b8)
                                         ((?p ?i) . ?\x03c0)
                                         ((?t ?a) . ?\x03c4)
                                         ((?a ?l) . ?\x03b1)
                                         ((?r ?h) . ?\x03c1)
                                         ((?. ?.) . ?\x0307)))


;; change cursor colors based on mode (state)
(setq-default evil-emacs-state-cursor '("white" box))
(setq-default evil-normal-state-cursor '("#fdf4c1" box))
(setq-default evil-visual-state-cursor '("orange" box))
(setq-default evil-insert-state-cursor '("#fdf4c1" bar))
(setq-default evil-replace-state-cursor '("orange" hollow))
(setq-default evil-operator-state-cursor '("orange" hollow))


;; set state change messages
(setq-default evil-insert-state-message "")
(setq-default evil-visual-state-message "")
#+end_src

Face configuration.

#+begin_src emacs-lisp :tangle no :noweb-ref evil-faces
(set-face-attribute 'evil-ex-search nil
                    :background "#81a2be"
                    :foreground "#0d0d0d"
                    :weight 'normal)
#+end_src

General evil-mode config.

#+begin_src emacs-lisp :tangle no :noweb-ref evil-config
(evil-mode 1)


;; use vim-style paragraphs
(defadvice forward-evil-paragraph (around default-values activate)
  (let ((paragraph-start (default-value 'paragraph-start))
        (paragraph-separate (default-value 'paragraph-separate)))
    ad-do-it))
#+end_src

General key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref evil-keybindings
(use-package key-chord
  :load-path "lisp/"
  :config
  (setq-default key-chord-two-keys-delay 0.2)


  ;; redefine chord definition so that keys can't be reversed
  (defun key-chord-define (keymap keys command)
    "Define in KEYMAP, a key-chord of the two keys in KEYS starting a COMMAND.

KEYS can be a string or a vector of two elements. Currently only
elements that corresponds to ascii codes in the range 32 to 126
can be used.

COMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed."
    (if (/= 2 (length keys))
        (error "Key-chord keys must have two elements"))
    ;; Exotic chars in a string are >255 but define-key wants 128..255
    ;; for those.
    (let ((key1 (logand 255 (aref keys 0)))
          (key2 (logand 255 (aref keys 1))))
      (define-key keymap (vector 'key-chord key1 key2) command)))


  ;; bind jk to normal state
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  (key-chord-mode 1))


;; make sure C-j executes in the command window
(define-key evil-command-window-mode-map (kbd "C-j") 'evil-command-window-execute)


;; remap Y to sensible function
(define-key evil-normal-state-map (kbd "Y") #'(lambda ()
                                                (interactive)
                                                (evil-yank (point) (line-end-position))))


;; convenient macro execution
(define-key evil-normal-state-map (kbd "RET") (kbd "@q"))
(define-key evil-visual-state-map (kbd "RET") (kbd "@q"))


;; increment/decrement at point
(define-key global-map (kbd "C-9") #'evil-numbers/dec-at-pt)
(define-key global-map (kbd "C-0") #'evil-numbers/inc-at-pt)


;; convenient remap for ex state
(evil-define-key nil evil-normal-state-map ";" 'evil-ex)
(evil-define-key nil evil-visual-state-map ";" 'evil-ex)
(evil-define-key 'normal 'dired-mode-map ";" 'evil-ex)
#+end_src

#+begin_src emacs-lisp :tangle yes :noweb no-export
(use-package evil
  :init
  <<evil-variables>>

  :config
  <<evil-faces>>
  <<evil-leader>>
  <<evil-config>>
  <<evil-keybindings>>)
#+end_src

** Evil leader

Let other parts of config create keybindings with evil
leader. Remember to update this with the noweb reference in order to
include bindings. Also, note that this will be evaluated after evil
mode's variables are set and right before the rest of the evil config.

#+begin_src emacs-lisp :tangle no :noweb no-export :noweb-ref evil-leader
;; I may eventually move this out
(defun kill-all-other-buffers ()
  "Kill all buffers except for this and *scratch*."
  (interactive)
  (mapc 'kill-buffer 
        (delete (current-buffer)
                (delete (get-buffer "*scratch*") (buffer-list))))
  (message "Killed all buffers except this and *scratch*."))


(use-package evil-leader
  :init
  (setq-default evil-leader/in-all-states 1)

  :config
  (global-evil-leader-mode)


  ;; set leader
  (evil-leader/set-leader "SPC")


  ;; convenient saving
  (evil-leader/set-key "f" #'(lambda ()
                               (interactive)
                               (cond
                                ((equal (buffer-name) "*scratch*") (message "(No changes need to be saved)"))
                                ((equal major-mode 'wdired-mode) (wdired-finish-edit))
                                ((equal major-mode 'org-agenda-mode) (org-save-all-org-buffers) (message "Org buffers saved."))
                                (t (call-interactively #'save-buffer)))))


  ;; convenient exiting
  (evil-leader/set-key "e" #'kill-this-buffer)
  (evil-leader/set-key "E" #'kill-all-other-buffers)
  (evil-leader/set-key "x" #'(lambda ()
                               (interactive)
                               (save-buffer)
                               (kill-this-buffer)))


  ;; delete current file
  (evil-leader/set-key "D" #'(lambda ()
                               (interactive)
                               (if (yes-or-no-p "Really truly really delete this file? ")
                                   (delete-file (buffer-file-name)))))


  ;; display current time
  (evil-leader/set-key "j" #'(lambda ()
                               (interactive)
                               (message (format-time-string "%H:%M:%S ― %d %b, %Y"))))


  ;; convenient way to evaluate buffer
  (evil-leader/set-key "v" 'eval-buffer)


  ;; convenient terminal opening
  (evil-leader/set-key "t" 'vterm)


  <<calendar-leader>>
  <<capture-leader>>
  <<dictionary-leader>>
  <<dired-leader>>
  <<editing-leader>>
  <<git-leader>>
  <<helm-leader>>
  <<line-number-leader>>
  <<mac-leader>>
  <<mail-leader>>
  <<olivetti-leader>>
  <<org-agenda-leader>>
  <<org-mode-leader>>
  <<scratch-leader>>
  <<script-leader>>
  <<snippet-leader>>
  <<spelling-leader>>
  <<templating-leader>>
  <<window-frame-leader>>)
#+end_src

** Evil surround

Like tpope's =vim-surround=.

#+begin_src emacs-lisp :tangle yes
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src

** Evil collection

This package adds evil keybindings to many different modes.

#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Evil embrace

Evil hugs. Very nasty.

#+begin_src emacs-lisp :tangle yes :noweb no-export
(defun add-general-embrace-pairs ()
  (embrace-add-pair ?\( "( " " )")
  (embrace-add-pair ?\) "(" ")")
  (embrace-add-pair ?\[ "[ " " ]")
  (embrace-add-pair ?\] "[" "]")
  (embrace-add-pair ?\{ "{ " " }")
  (embrace-add-pair ?\} "{" "}")
  (embrace-add-pair ?m "$" "$"))


(use-package evil-embrace
  :ensure t
  :config
  (evil-embrace-enable-evil-surround-integration)

  (add-hook 'prog-mode-hook #'add-general-embrace-pairs)
  (add-hook 'text-mode-hook #'add-general-embrace-pairs)

  <<latex-mode-embrace>>
  <<org-mode-embrace>>)
#+end_src

** Evil owl

Hire owls to report registers and marks.

#+begin_src emacs-lisp :tangle yes
(use-package evil-owl
  :config
  (setq evil-owl-max-string-length 500)
  (add-to-list 'display-buffer-alist
               '("*evil-owl*"
                 (display-buffer-in-side-window)
                 (side . bottom)
                 (window-height . 0.3)))
  (evil-owl-mode))
#+end_src

** Evil commentary

Better commenting based on tpope's vim-commentary.

#+begin_src emacs-lisp :tangle yes
(use-package evil-commentary
  :config

  (evil-commentary-mode))
#+end_src

** Evil little word

For short, hurtful comments. And camel case motion.

#+begin_src emacs-lisp :tangle yes
(use-package evil-little-word
  :load-path "lisp/"
  :config
  (define-key evil-normal-state-map (kbd "w") 'evil-forward-little-word-begin)
  (define-key evil-normal-state-map (kbd "b") 'evil-backward-little-word-begin)
  (define-key evil-operator-state-map (kbd "w") 'evil-forward-little-word-begin)
  (define-key evil-operator-state-map (kbd "b") 'evil-backward-little-word-begin)
  (define-key evil-visual-state-map (kbd "w") 'evil-forward-little-word-begin)
  (define-key evil-visual-state-map (kbd "b") 'evil-backward-little-word-begin)
  (define-key evil-visual-state-map (kbd "i w") 'evil-inner-little-word))
#+end_src

** Evil indent plus

For indent-based text objects.

#+begin_src emacs-lisp :tangle yes
(use-package evil-indent-plus
  :config
  (evil-indent-plus-default-bindings))
#+end_src

* Navigation

Motion between and within lines.

#+begin_src emacs-lisp :tangle yes
;; better line motion
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
(define-key evil-visual-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-visual-state-map (kbd "k") 'evil-previous-visual-line)


;; repeat find char remap
(define-key evil-normal-state-map (kbd "-") 'evil-repeat-find-char)
#+end_src

Scrolling.

#+begin_src emacs-lisp :tangle yes
(define-key evil-normal-state-map (kbd "J")
  (lambda () (interactive) (scroll-up 3)))
(define-key evil-normal-state-map (kbd "K")
  (lambda () (interactive) (scroll-down 3)))


;; smooth scrolling
(setq scroll-margin 5
      scroll-conservatively 9999
      scroll-step 1)
#+end_src

Searching.

#+begin_src emacs-lisp :tangle yes
;; use backslash to end search highlighting
(define-key evil-normal-state-map (kbd "\\") #'evil-ex-nohighlight)


;; use C-j in isearch
(define-key isearch-mode-map (kbd "C-j") #'isearch-exit)
#+end_src

Jumping.

#+begin_src emacs-lisp :tangle yes
;; swap ' and `
(define-key evil-normal-state-map (kbd "`") #'evil-goto-mark-line)
(define-key evil-normal-state-map (kbd "'") #'evil-goto-mark)


;; jump to word with ace-jump-mode
(use-package ace-jump-mode
  :config
  (define-key evil-normal-state-map (kbd "C-f") #'ace-jump-word-mode)

  (set-face-attribute 'ace-jump-face-foreground nil
                      :foreground "#cc6666"))
#+end_src

** Buffer ring

Create a ring of buffers. I may turn this into a small minor mode in
the future. This also happens to be my first "actual" emacs lisp
program.

#+begin_src emacs-lisp :tangle yes
;; create buffer toggle ring
(defvar buffer-toggle-ring '(t))
(defvar buffer-toggle-ring-index 0)


;; remove current buffer from ring
(defun remove-current-from-buffer-ring ()
  "Remove current buffer from buffer ring."
  (when (member (current-buffer) buffer-toggle-ring)
    (setq buffer-toggle-ring (delete (current-buffer) buffer-toggle-ring))
    (print-elements-of-list buffer-toggle-ring)
    (setq buffer-toggle-ring-index (- buffer-toggle-ring-index 1))))


;; add/remove current buffer from ring
(defun toggle-buffer-in-buffer-ring ()
  "Add/remove current buffer from ring."
  (interactive)
  (if (member (current-buffer) buffer-toggle-ring)
      (remove-current-from-buffer-ring)
    (insert-after buffer-toggle-ring buffer-toggle-ring-index (current-buffer))
    (print-elements-of-list buffer-toggle-ring)
    (setq buffer-toggle-ring-index (+ buffer-toggle-ring-index 1))))


;; switch to next buffer in ring
(defun switch-to-next-buffer-in-ring ()
  "Switch to next buffer in ring."
  (interactive)
  (when (> (length buffer-toggle-ring) 1)
    (setq buffer-toggle-ring-index (+ (mod buffer-toggle-ring-index (- (length buffer-toggle-ring) 1)) 1))
    (switch-to-buffer (nth buffer-toggle-ring-index buffer-toggle-ring))))


;; remove buffer from ring when buffer is closed
(add-hook 'kill-buffer-hook 'remove-current-from-buffer-ring)


(define-key evil-normal-state-map (kbd "<S-backspace>") 'toggle-buffer-in-buffer-ring)
(define-key evil-normal-state-map (kbd "<backspace>") 'switch-to-next-buffer-in-ring)
#+end_src

** Helm

#+begin_src emacs-lisp :tangle yes :noweb no-export
(use-package helm
  :config
  (helm-mode 1)

  (setq-default helm-completion-style 'emacs)
  (setq-default helm-left-margin-width 1)
  (setq-default helm-buffers-left-margin-width 1)

  <<helm-keys>>
  <<helm-faces>>)
#+end_src

Define =evil-leader= bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref helm-leader
;; open the minibuffer
(evil-leader/set-key "k" 'helm-mini)


;; open command minibuffer
(evil-leader/set-key ";" 'helm-M-x)


;; for helm-ag
(evil-leader/set-key "g" 'helm-ag)
#+end_src

Customize helm appearance.

#+begin_src emacs-lisp :tangle no :noweb-ref helm-faces
(set-face-attribute 'helm-candidate-number nil
                    :extend t
                    :foreground "#BAA659"
                    :background "#121112")


(set-face-attribute 'helm-header-line-left-margin nil
                    :extend t
                    :foreground "#BAB771"
                    :background "#121112")


(set-face-attribute 'helm-selection nil
                    :extend t
                    :background "#191919"
                    :weight 'bold)


(set-face-attribute 'helm-ff-file-extension nil
                    :extend t
                    :foreground 'unspecified)


(set-face-attribute 'helm-buffer-directory nil
                    :extend t
                    :background 'unspecified
                    :foreground 'unspecified
                    :underline t
                    :weight 'bold)


(set-face-attribute 'helm-source-header nil
                    :extend t
                    :background "#121112"
                    :foreground "#7d7461"
                    :slant 'italic
                    :family "Victor Mono")


(set-face-attribute 'helm-buffer-saved-out nil
                    :extend t
                    :background 'unspecified
                    :foreground color-red)


(set-face-attribute 'helm-ff-denied nil
                    :extend t
                    :background 'unspecified
                    :foreground color-red)
#+end_src

Define key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref helm-keys
(define-key helm-map (kbd "M-]") 'helm-next-source)
(define-key helm-map (kbd "M-[") 'helm-previous-source)


(define-key helm-map (kbd "C-j") 'helm-confirm-and-exit-minibuffer)
(define-key helm-map (kbd "C-k") 'helm-execute-persistent-action)


(define-key helm-map (kbd "C-M-j") 'helm-cr-empty-string)


(define-key helm-read-file-map (kbd "C-j") 'helm-ff-RET)


(global-set-key (kbd "M-x") 'helm-M-x)
#+end_src

*** Helm ag

Ensure =helm-ag=.

#+begin_src emacs-lisp :tangle yes
(use-package helm-ag)
#+end_src

*** Helm projectile

=helm-projectile= config.

#+begin_src emacs-lisp :tangle yes
(use-package helm-projectile
  :ensure t
  :config
  (setq-default projectile-git-submodule-command nil)

  ;; projectile not working until I figure it out
  (setq-default helm-mini-default-sources '(helm-source-bookmarks
                                            ;; helm-source-projectile-recentf-list
                                            ;; helm-source-projectile-buffers-list
                                            ;; helm-source-projectile-projects
                                            ;; helm-source-projectile-files-list
                                            helm-source-buffers-list
                                            helm-source-recentf)))
#+end_src

* Editing

General editing config.

#+begin_src emacs-lisp :tangle yes
;; tab width
(setq-default tab-width 4)
(setq-default c-basic-offset 4)
(setq-default indent-tabs-mode nil)


;; use C-j to join in visual mode
(define-key evil-visual-state-map (kbd "C-j") #'evil-join)


;; stop blinking, cursor. seriously.
(blink-cursor-mode -1)


;; show matching parenthesis
(show-paren-mode t)


;; set fill column (obviously)
(setq-default fill-column 80)


;; make sure sentences are not limited to those that are double-space-separated
(setq-default sentence-end-double-space nil)
#+end_src

Hooks.

#+begin_src emacs-lisp :tangle yes
;; disable auto-fill-mode when asked politely
(defun enable-polite-auto-fill ()
  (pcase (org-collect-keywords '("AUTOFILL"))
    (`(("AUTOFILL" . ,val))
     (when (not (equal (car val) "nil"))
       (auto-fill-mode 1)))
    (-
     (auto-fill-mode 1))))


(add-hook 'text-mode-hook #'enable-polite-auto-fill)


;; highlight current line
(add-hook 'prog-mode-hook #'hl-line-mode)
#+end_src

Split paragraph into sentences.

#+begin_src emacs-lisp :tangle yes
(defvar last-paragraph-sentence-split nil
  "Dotted list holding markers for the first and last paragraphs
after using split-paragraph-into-sentences.")


(defun split-paragraph-into-sentences ()
  (interactive)
  (save-excursion
    (let* ((sentence-count 0)
           (paragraph-bounds (if (use-region-p)
                                 `(,(region-beginning) . ,(region-end))
                               (mark-paragraph)
                               `(,(point) . ,(mark))))
           (beginning-marker (progn
                               (goto-char (car paragraph-bounds))
                               (point-marker))))
      (forward-sentence)
      (while (< (point) (cdr paragraph-bounds))
        (delete-char 1)
        (insert "\n\n")
        (fill-paragraph)
        (forward-sentence)
        (setq sentence-count (+ 1 sentence-count)))
      (setq last-paragraph-sentence-split
            `(,beginning-marker . ,(point-marker))))))


(defun join-sentences-into-paragraph ()
  (interactive)
  (save-excursion
    (let ((start (marker-position (car last-paragraph-sentence-split)))
          (end (marker-position (cdr last-paragraph-sentence-split))))
      (goto-char start)
      (join-line nil (+ 1 start) end)
      (fill-paragraph))
    (setq last-paragraph-sentence-split nil)))


(defun toggle-sentence-split ()
  (interactive)
  (if last-paragraph-sentence-split
      (join-sentences-into-paragraph)
    (split-paragraph-into-sentences)))
#+end_src

Key bindings.

#+begin_src emacs-lisp :tangle yes
;; use C-j for command prompt
(define-key evil-ex-completion-map (kbd "C-j") #'exit-minibuffer)


;; insert spaces without leaving normal mode
(evil-define-key 'normal 'org-mode-map (kbd "z l") #'(lambda ()
                                                       (interactive)
                                                       (forward-char)
                                                       (insert " ")))
(evil-define-key 'normal 'org-mode-map (kbd "z h") #'(lambda ()
                                                       (interactive)
                                                       (insert " ")
                                                       (evil-backward-char)))


;; capitalization
(evil-define-key 'normal global-map (kbd "g \'") #'(lambda ()
                                                     (interactive)
                                                     (save-excursion
                                                       (if (not (equal (char-before) ? ))
                                                           (evil-backward-word-begin 1))
                                                       (upcase-char 1))))
(evil-define-key 'normal global-map (kbd "g \"") #'(lambda ()
                                                     (interactive)
                                                     (save-excursion
                                                       (if (not (equal (char-before) ? ))
                                                           (evil-backward-word-begin 1))
                                                       (downcase-word 1))))


;; make sure C-j doesn't actually create a new line in normal state
(define-key evil-normal-state-map (kbd "C-j") #'evil-ret)


;; delete char the fast way
(define-key key-translation-map (kbd "C-h") [127])


;; use C-j as RET
(global-set-key (kbd "C-j") #'newline)


;; set convenient line-opening
(defun open-line-down ()
  "Open and move to next line."
  (interactive)
  (call-interactively 'move-end-of-line)
  (newline))


(defun open-line-up ()
  "Open and move to previous line."
  (interactive)
  (call-interactively 'move-beginning-of-line)
  (newline)
  (forward-line -1))


(define-key evil-normal-state-map (kbd "z j") #'open-line-down)
(define-key evil-normal-state-map (kbd "z k") #'open-line-up)


(defun evil-shift-right-preserve ()
  (interactive)
  (evil-shift-right evil-visual-beginning evil-visual-end)
  (evil-normal-state)
  (evil-visual-restore))


(defun evil-shift-left-preserve ()
  (interactive)
  (evil-shift-left evil-visual-beginning evil-visual-end)
  (evil-normal-state)
  (evil-visual-restore))


(define-key evil-visual-state-map (kbd ">") #'evil-shift-right-preserve)
(define-key evil-visual-state-map (kbd "<") #'evil-shift-left-preserve)
#+end_src

Evil leader bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref editing-leader
;; zoom in/out
(evil-leader/set-key "=" #'text-scale-adjust)


;; toggle sentence split
(evil-leader/set-key "s" #'toggle-sentence-split)
#+end_src

** Snippets

Enable YASnippet.

#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode)


  ;; use C-, instead of tab to expand
  (define-key yas-minor-mode-map [(tab)] nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)

  (define-key yas-minor-mode-map (kbd "C-,")
              #'(lambda ()
                  (interactive)
                  (let ((inhibit-message t))
                    (yas-expand)
                    (org-toggle-pretty-entities)
                    (org-toggle-pretty-entities))))
              


  ;; disable out-of-field modification warning (for laas)
  (setq-default yas-inhibit-overlay-modification-protection t) 


  ;; make sure latex snippets work in org-mode
  (add-hook 'org-mode-hook (lambda ()
                             (yas-minor-mode)
                             (yas-activate-extra-mode 'latex-mode))))
#+end_src

Matrix-like snippets.

#+begin_src emacs-lisp :tangle yes
(defun insert-matrix-like (env rows cols)
  (interactive "sEnvironment: \nnRows: \nnColumns: ")
  (let ((beginning-marker (point-marker))
        (end-marker (save-excursion
                      (goto-char (1+ (point)))))
        (matrix-string ""))
    (insert (format "\\begin{%s}\n" env))
    (dotimes (i rows)
      (dotimes (j cols)
        (setq matrix-string (concat matrix-string
                                    (format
                                     (if (equal j (1- cols)) "$%s" "$%s & ")
                                     (+ 1 (* i cols) j)))))
      (setq matrix-string (concat matrix-string (if (equal i (1- rows)) (format "\n\\end{%s}" env) "\\\\\\\n"))))
    (yas-expand-snippet matrix-string)
    (add-hook 'yas-after-exit-snippet-hook #'align-yasnippet-matrix)))


(defun align-yasnippet-matrix ()
  (align-regexp yas-snippet-beg yas-snippet-end "\\(\\s-*\\) &" 1 1 t)
  (remove-hook 'yas-after-exit-snippet-hook #'align-yasnippet-matrix))
#+end_src

Enable AAS.

#+begin_src emacs-lisp :tangle yes
;; It may be interesting to note that the following combinations don't appear in
;; English: bx, cj, cv, cx, dx, fq, fx, gq, gx, hx, jc, jf, jg, jq, js, jv, jw,
;; jx, jz, kq, kx, mx, px, pz, qb, qc, qd, qf, qg, qh, qj, qk, ql, qm, qn, qp,
;; qs, qt, qv, qw, qx, qy, qz, sx, vb, vf, vh, vj, vm, vp, vq, vt, vw, vx, wx,
;; xj, xx, zj, zq, zx


(use-package aas
  :hook (LaTeX-mode . aas-activate-for-major-mode)
  :hook (org-mode . aas-activate-for-major-mode)
  :config
  (aas-set-snippets 'text-mode
    ";o-" "ō"
    ";i-" "ī"
    ";a-" "ā"
    ";u-" "ū"
    ";e-" "ē")

  (aas-set-snippets 'org-mode
    "js" (lambda () (interactive)
           (yas-expand-snippet "\\\\( $1 \\\\)$0"))
    "jf" (lambda () (interactive)
           (yas-expand-snippet "\\begin{align*}\n$0\n\\end{align*}")))

  (aas-set-snippets 'org-mode
    :cond #'texmathp
    "3det" (lambda () (interactive)
             (insert-matrix-like "vmatrix" 3 3))
    "2det" (lambda () (interactive)
             (insert-matrix-like "vmatrix" 2 2))
    "3mat" (lambda () (interactive)
             (insert-matrix-like "bmatrix" 3 3))
    "2mat" (lambda () (interactive)
             (insert-matrix-like "bmatrix" 2 2))
    "matr" (lambda (rows cols) (interactive "nRows: \nnColumns: ")
             (insert-matrix-like "bmatrix" rows cols))
    "matl" #'insert-matrix-like)

  (let ((snippets '(("sup" . "^{$1$0")
                    ("ud" . "_{$1$0")
                    ("jg" . "^2$0")
                    ("jc" . "^3$0")

                    ("gal" . "\\alpha$0")
                    ("gbe" . "\\beta$0")
                    ("gga" . "\\gamma$0")
                    ("gde" . "\\delta$0")
                    ("gep" . "\\epsilon$0")
                    ("gze" . "\\zeta$0")
                    ("geta" . "\\eta$0")
                    ("gth" . "\\theta$0")
                    ("gio" . "\\iota$0")
                    ("gka" . "\\kappa$0")
                    ("gla" . "\\lambda$0")
                    ("gmu" . "\\mu$0")
                    ("gnu" . "\\nu$0")
                    ("gxi" . "\\xi$0")
                    ("gmi" . "\\omicron$0")
                    ("gpi" . "\\pi$0")
                    ("grh" . "\\rho$0")
                    ("gsi" . "\\sigma$0")
                    ("gta" . "\\tau$0")
                    ("gup" . "\\upsilon$0")
                    ("gph" . "\\phi$0")
                    ("gch" . "\\chi$0")
                    ("gpsi" . "\\psi$0")
                    ("gme" . "\\omega$0")

                    ("Alpha" . "\\Alpha$0")
                    ("Beta" . "\\Beta$0")
                    ("Gamma" . "\\Gamma$0")
                    ("Delta" . "\\Delta$0")
                    ("Epsilon" . "\\Epsilon$0")
                    ("Zeta" . "\\Zeta$0")
                    ("Eta" . "\\Eta$0")
                    ("Theta" . "\\Theta$0")
                    ("Iota" . "\\Iota$0")
                    ("Kappa" . "\\Kappa$0")
                    ("Lambda" . "\\Lambda$0")
                    ("Mu" . "\\Mu$0")
                    ("Nu" . "\\Nu$0")
                    ("Xi" . "\\Xi$0")
                    ("Omicron" . "\\Omicron$0")
                    ("Pi" . "\\Pi$0")
                    ("Rho" . "\\Rho$0")
                    ("Sigma" . "\\Sigma$0")
                    ("Tau" . "\\Tau$0")
                    ("Upsilon" . "\\Upsilon$0")
                    ("Phi" . "\\Phi$0")
                    ("Chi" . "\\Chi$0")
                    ("Psi" . "\\Psi$0")
                    ("Omega" . "\\Omega$0")

                    ("ln" . "\\ln$0")
                    ("exp" . "\\exp$0")
                    ("lo" . "\\log$0")
                    ("ein" . "\\in$0")

                    ("par" . "\\left( $1 \\right)$0")

                    ("equ" . " = $0")
                    ("neq" . " \\neq $0")
                    ("vm" . " - $0")
                    ("vp" . " + $0")
                    ("seq" . " &= $0")
                    ("amp" . " & $0")
                    ("gtn" . " > $0")
                    ("sgt" . " &> $0")
                    ("lst" . " < $0")
                    ("slt" . " &< $0")
                    ("leq" . " \\leq $0")
                    ("lseq" . " &\\leq $0")
                    ("geq" . " \\geq $0")
                    ("rk" . "\\\\\\\\")
                    ("gseq" . " &\\geq $0")
                    ("trip" . " \\equiv $0")
                    ("strip" . " &\\equiv $0")
                    ("//" . "\\frac{$1{$2}$0"))))

    (dolist (snippet snippets)
      (aas-set-snippets 'org-mode
        :cond #'texmathp
        (car snippet) `(lambda () (interactive)
                         (yas-expand-snippet ',(cdr snippet)))))))

#+end_src

Evil leader key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref snippet-leader
;; visit snippet
(evil-leader/set-key "V" #'yas-visit-snippet-file)


;; new snippet
(evil-leader/set-key "n" #'yas-new-snippet)
#+end_src

** Spelling

Set path to spellcheck program.

#+begin_src emacs-lisp :tangle yes
(setq-default ispell-program-name "/usr/local/bin/aspell")
#+end_src

Automatically correct words when pressing space bar.  

#+begin_src emacs-lisp :tangle no :noweb-ref autocorrect-words
(defvar autocorrect-words-on-type t
  "Whether to automatically correct a word after pressing space.")


(defun correct-word-before-space ()
  (if (and
       autocorrect-words-on-type
       (memq major-mode '(org-mode mail-mode text-mode))
       (not (texmathp))
       (not (equal (TeX-current-macro) "text"))
       (not (org-in-src-block-p)))
      (when (and
             (equal (char-before) ? )
             (save-excursion
               (goto-char (- (point) 1))
               (thing-at-point 'word)))
        (save-excursion
          (flyspell-auto-correct-word)))))


(add-hook 'post-self-insert-hook #'correct-word-before-space)


(define-key org-mode-map (kbd "<f3>") #'(lambda ()
                                          (interactive)
                                          (if autocorrect-words-on-type
                                              (progn
                                                (setq autocorrect-words-on-type nil)
                                                (message "Disabled autocorrect."))
                                            (setq autocorrect-words-on-type t)
                                            (message "Enabled autocorrect."))))
#+end_src

Create a ring of dictionary languages.

#+begin_src emacs-lisp :tangle yes
(let ((langs '("american" "brasileiro")))
  (setq lang-ring (make-ring (length langs)))
  (dolist (elem langs) (ring-insert lang-ring elem)))


(defun cycle-ispell-languages ()
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)))
#+end_src

Only spellcheck comments.

#+begin_src emacs-lisp :tangle yes
(setq-default flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))
#+end_src

Set evil-leader key bindings for spelling-related functions.

#+begin_src emacs-lisp :tangle no :noweb-ref spelling-leader
;; start flyspell
(evil-leader/set-key "S" #'(lambda ()
                             (interactive)
                             (if (and (derived-mode-p 'prog-mode) (not (equal (buffer-name) "*scratch*")))
                                 (flyspell-prog-mode)
                               (progn
                                 (flyspell-mode)
                                 (if (equal (buffer-name) "*scratch*")
                                     (flycheck-mode -1))))))


;; cycle through ispell languages
(evil-leader/set-key "C" #'cycle-ispell-languages)


;; change or save spelling
(evil-leader/set-key "[" #'flyspell-correct-word-before-point)
#+end_src

Customize fLyspell faces.

#+begin_src emacs-lisp :tangle no :noweb-ref flyspell-faces
(set-face-attribute 'flyspell-duplicate nil
                    :underline color-blue)


(set-face-attribute 'flyspell-incorrect nil
                    :underline color-red)
#+end_src

#+begin_src emacs-lisp :tangle yes :noweb no-export
(use-package flyspell
  :config
  <<flyspell-faces>>)
#+end_src

** Smartparens

#+begin_src emacs-lisp :tangle yes
(use-package smartparens
  :config

  (smartparens-global-mode)

  ;; disable pairing for single quotes in emacs lisp
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil))
#+end_src

** Templating

Placeholder for generic templates.

#+begin_src emacs-lisp :tangle yes
(defvar template-placeholder-text "<++>"
  "Placeholder text to be replaced by `edit-next-placeholder'.")
#+end_src

Find and edit next placeholder. Adapted from somewhere a long time
ago.

#+begin_src emacs-lisp :tangle yes
(defun edit-next-placeholder ()
  "Jump to next `template-placeholder-text' and edit."
  (interactive)
  (if (search-forward template-placeholder-text nil t)
      (progn
        (delete-backward-char (length template-placeholder-text))
        (evil-insert-state))))
#+end_src

Bind keys.

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-.") #'edit-next-placeholder)
#+end_src

Bind with =evil-leader=.

#+begin_src emacs-lisp :tangle no :noweb-ref templating-leader
(evil-leader/set-key "r" #'edit-next-placeholder)
#+end_src

** Macros

Use this macro to turn =org-mode= lists into table rows (for English
class).

#+begin_src emacs-lisp :tangle yes
(fset 'org-list-to-row
      (kmacro-lambda-form [?v ?i ?p ?\; ?s ?/ ?\\ ?n ?  ?  ?/ ?  ?\C-j ?g ?v ?\; ?s ?/ ?- ?  ?\\ ?\( ?. ?* ?\\ ?\) ?/ ?| ?  ?\\ ?1 ?  return ?g ?v ?\C-j ?A ?| ?j ?k] 0 "%d"))

(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c C-r") 'org-list-to-row))
#+end_src

** Undo tree

Use undo tree.

#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
  :config
  ;; stop creating automatic backups
  (setq-default undo-tree-auto-save-history nil)


  (global-undo-tree-mode))
#+end_src

* Shell

=vterm= config.

#+begin_src emacs-lisp :tangle yes
(defun vterm-send-escape ()
  (interactive)
  (vterm-send-key "<escape>"))


(use-package vterm
  :ensure t
  :config
  (define-key vterm-mode-map (kbd "M-h") 'evil-window-left)
  (define-key vterm-mode-map (kbd "M-j") 'evil-window-down)
  (define-key vterm-mode-map (kbd "M-k") 'evil-window-up)
  (define-key vterm-mode-map (kbd "M-l") 'evil-window-right)
  (setq-local evil-insert-state-cursor '("#aaa" box))


  (define-key vterm-mode-map (kbd "C-<return>") #'evil-normal-state)


  ;; use C-return to escape external insert state
  (evil-define-key 'insert vterm-mode-map (kbd "<escape>") #'vterm-send-escape))
#+end_src

Use =M-1= to start running shell command.

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "M-1") 'shell-command)
#+end_src

Insert file name with =C-o= in shell command prompt.

#+begin_src emacs-lisp :tangle yes
(define-key minibuffer-local-map (kbd "C-o")
  (lambda ()
    (interactive) 
    (insert (buffer-name (window-buffer (minibuffer-selected-window))))))
#+end_src

Use =C-n= and =C-p= to navigate shell command history (will work for lisp
eval too).

#+begin_src emacs-lisp :tangle yes
(define-key minibuffer-local-map (kbd "C-p") 'previous-line-or-history-element)
(define-key minibuffer-local-map (kbd "C-n") 'next-line-or-history-element)
#+end_src

* Remote

** Tramp

Make tramp play nice with Marylou.

#+begin_src emacs-lisp :tangle yes
(setq-default tramp-password-prompt-regexp "^.*\\(\\(Password\\|Verification\\)\\).*: ? *")
#+end_src

** Git

Use syntax highlighting in gitignore.

#+begin_src emacs-lisp :tangle yes
(use-package gitignore-mode
  :load-path "lisp/")
#+end_src

Use magit. Obviously. 

#+begin_src emacs-lisp :tangle yes
(use-package magit)
#+end_src

Make sure magit opens in the same window.

#+begin_src emacs-lisp :tangle yes
(setq-default magit-display-buffer-function
              (lambda (buffer)
                (display-buffer
                 buffer (if (and (derived-mode-p 'magit-mode)
                                 (memq (with-current-buffer buffer major-mode)
                                       '(magit-process-mode
                                         magit-revision-mode
                                         magit-diff-mode
                                         magit-stash-mode
                                         magit-status-mode)))
                            nil
                          '(display-buffer-same-window)))))
#+end_src

Evil leader bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref git-leader
(evil-leader/set-key (kbd "m") 'magit)
#+end_src

* Programming

** Flycheck

Customize faces.

#+begin_src emacs-lisp :tangle no :noweb-ref flycheck-faces
(set-face-attribute 'flycheck-error nil
                    :underline color-red)


(set-face-attribute 'flycheck-info nil
                    :underline color-light-green)


(set-face-attribute 'flycheck-warning nil
                    :underline color-light-orange)
#+end_src

Start up.

#+begin_src emacs-lisp :tangle no :noweb-ref flycheck-config
(setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))

(global-flycheck-mode)
#+end_src

#+begin_src emacs-lisp :tangle yes :noweb no-export
(use-package flycheck
  :config
  <<flycheck-faces>>
  <<flycheck-config>>)
#+end_src

** Flymake

Customize faces.

#+begin_src emacs-lisp :tangle no :noweb-ref flymake-faces
(set-face-attribute 'flymake-error nil
                    :underline color-red)


(set-face-attribute 'flymake-note nil
                    :underline color-light-green)


(set-face-attribute 'flymake-warning nil
                    :underline color-light-orange)
#+end_src

#+begin_src emacs-lisp :tangle yes :noweb no-export
(use-package flymake
  :config
  <<flymake-faces>>)
#+end_src

** Company

Company config.

#+begin_src emacs-lisp :tangle yes
(use-package company
  :init (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq-default company-tooltip-align-annotations t)


  ;; use icons in company mode
  (setq-default company-format-margin-function 'company-vscode-dark-icons-margin)


  ;; use C-j to complete
  (define-key company-active-map (kbd "C-j") #'company-complete-selection)


  ;; change company faces
  (set-face-attribute 'company-tooltip nil
                      :inherit 'default
                      :background color-background)


  (set-face-attribute 'company-scrollbar-fg nil
                      :background color-dark-subdued)


  (set-face-attribute 'company-scrollbar-bg nil
                      :background color-background)


  (set-face-attribute 'company-tooltip-mouse nil
                      :background color-dark-subdued)


  (set-face-attribute 'company-tooltip-selection nil
                      :background color-dark-subdued)


  (set-face-attribute 'company-tooltip-annotation nil
                      :foreground color-blue)


  (setq-default company-idle-delay              0.1
                company-minimum-prefix-length   2
                company-show-numbers            t
                company-tooltip-limit           20
                company-dabbrev-downcase        nil))
#+end_src

** Languages

** Python

Elpy config.

#+begin_src emacs-lisp :tangle yes
(use-package elpy
  :config
  (elpy-enable)


  ;; stop weird indentation guides from elpy
  (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))


  (setq-default elpy-rpc-backend "jedi")


  ;; use global environment
  (setq-default elpy-rpc-virtualenv-path 'current))
#+end_src

Jedi config.

#+begin_src emacs-lisp :tangle yes
(use-package company-jedi
  :config

  (add-hook 'python-mode-hook #'(lambda ()
                                  (interactive)
                                  (add-to-list 'company-backends 'company-jedi))))
#+end_src

Set variables.

#+begin_src emacs-lisp :tangle yes
;; setting python executable
(setq-default flycheck-python-flake8-executable "python")
(setq-default flycheck-python-pycompile-executable "python")
(setq-default flycheck-python-pylint-executable "python")

;; set python path
(setenv "PYTHONPATH" (shell-command-to-string "$SHELL --login -c 'echo -n $PYTHONPATH'"))
#+end_src

Add a font lock face for method calls.

#+begin_src emacs-lisp :tangle yes
(defface method-call-lock
  '((t :foreground "#b5bd68"))
  "Face for method calls."
  :group 'python-mode)
#+end_src

Add a font lock face for operators.

#+begin_src emacs-lisp :tangle yes
(defface operator-lock
  '((t :foreground "#cc6666"))
  "Face for operators."
  :group 'python-mode)
#+end_src

Define Python method calls and operators as font lock keywords.

#+begin_src emacs-lisp :tangle yes
(font-lock-add-keywords 'python-mode
                        `((,(concat
                             "\\."
                             "\\<\\([_a-zA-Z][_a-zA-Z0-9]*\\)\\>"
                             "(") 1 'method-call-lock keep t)
                          ("\\([=+-/*><]\\)" . 'operator-lock)))
#+end_src

Remove =matplotlib= line from graph in HTML export.

#+begin_src emacs-lisp :tangle no :noweb-ref python-babel
(defun remove-ipython-matplotlib-line (text backend info)
  (replace-regexp-in-string "<pre class=\"example\"[[:ascii:][:nonascii:]]*?\\[&lt;matplotlib.lines.Line2D at 0x[0-9a-f]*&gt;\\][[:ascii:][:nonascii:]]*?</pre>" "" text))


(add-to-list 'org-export-filter-drawer-functions
             'remove-ipython-matplotlib-line)


;; load python in org-mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
#+end_src

Add docstrings to embrace pairs.

#+begin_src emacs-lisp :tangle yes
(add-hook 'python-mode-hook (lambda ()
                              (embrace-add-pair ?d "\"\"\"" "\"\"\"")))
#+end_src

** Rust

Rust config.

#+begin_src emacs-lisp :tangle yes
(setq-default lsp-rust-server 'rust-analyzer)

(use-package rust-mode
  :config
  (add-hook 'rust-mode-hook #'racer-mode)


  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)


  (setq-default racer-rust-src-path
                (concat (string-trim
                         (shell-command-to-string "rustc --print sysroot"))
                        "/lib/rustlib/src/rust/library")))
#+end_src

** Elisp

Convenient way to open lisp eval.

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-;") 'eval-expression)
#+end_src

** SGML/HTML

Set indentation to 4 spaces.

#+begin_src emacs-lisp :tangle yes
(setq-default sgml-basic-offset 4)
(setq-default sgml-specials nil)
#+end_src

Emmet config.

#+begin_src emacs-lisp :tangle yes
(use-package emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode))
#+end_src

** Auctex/latex

LaTeX config.

#+begin_src emacs-lisp :tangle yes
(use-package latex
  :ensure auctex
  :config
  (setq-default TeX-auto-save t)
  (setq-default TeX-parse-self t)


  ;; refresh PDF constantly
  (setq-default auto-revert-interval 0.5)


  ;; stop showing revert messages
  (setq-default auto-revert-verbose nil)


  ;; disable inline sub-/superscript --- gets annoying
  (setq-default font-latex-fontify-script nil)


  ;; add math pairing
  (sp-local-pair '(latex-mode org-mode) "$" "$")


  ;; add pairings for \left \right delimiters
  (sp-local-pair '(latex-mode org-mode) "\\left(" "\\right)")
  (sp-local-pair '(latex-mode org-mode) "\\left[" "\\right]")


  ;; Use pdf-tools to open PDF files
  (setq-default TeX-view-program-selection '((output-pdf "PDF Tools"))
                TeX-source-correlate-start-server t)


  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer))
#+end_src

Add =evil-embrace= pairs to LaTeX mode.

#+begin_src emacs-lisp :tangle no :noweb-ref latex-mode-embrace
(defun embrace-with-latex-environment ()
  (let ((cname (or (read-string "Environment: ") "")))
    (cons (format "\\begin{%s}\n" cname) (format "\n\\end{%s}" cname))))


(defun embrace-with-latex-command ()
  (let ((cname (read-string "Command: ")))
    (cons (format "\\%s{" (or cname "")) "}")))


(add-hook 'LaTeX-mode-hook (lambda ()
                             (embrace-add-pair ?i "\\emph{" "}")
                             (embrace-add-pair ?m "$" "$")
                             (embrace-add-pair ?\[ "\\left[" "\\right]")
                             (embrace-add-pair ?\( "\\left(" "\\right)")
                             (embrace-add-pair ?\] "\\left[ " " \\right]")
                             (embrace-add-pair ?\) "\\left( " " \\right)")
                             (embrace-add-pair-regexp ?c "\\[^{]*?{" "}"
                                                      #'embrace-with-latex-command
                                                      (embrace-build-help "\\command{" "}"))
                             (embrace-add-pair-regexp ?e "\\begin{[^{]*?}" "\\end{[^{]*?}"
                                                      #'embrace-with-latex-environment
                                                      (embrace-build-help "\\begin{environment}" "\\end{environment}"))))
#+end_src

** Scripts

Run Python script.

#+begin_src emacs-lisp :tangle yes
(defun run-current-python (arguments)
  "Run current Python file."
  (shell-command-to-string
   (format
    "export PYTHONPATH='${PYTHONPATH}:/Users/jetblack/maxwell/src/:/Users/jetblack/pyimports/' && python '%s' %s"
    (buffer-file-name) arguments)))
#+end_src

Run Node.js script.

#+begin_src emacs-lisp :tangle yes
(defun run-current-javascript (arguments)
  "Run current JavaScript file."
  (shell-command-to-string
   (format
    "node '%s' %s"
    (buffer-file-name) arguments)))
#+end_src

Run Julia script.

#+begin_src emacs-lisp :tangle yes
(defun run-current-julia (arguments)
  "Run current Python file."
  (shell-command-to-string
   (format
    "export PYTHONPATH='${PYTHONPATH}:/Users/jetblack/maxwell/src/' && /Applications/Julia-1.6.app/Contents/Resources/julia/bin/julia '%s' %s"
    (buffer-file-name) arguments)))
#+end_src

Run shell script.

#+begin_src emacs-lisp :tangle yes
(defun run-current-shell (arguments)
  "Run current shell script."
  (shell-command-to-string (format "zsh '%s' %s" (buffer-file-name) arguments)))
#+end_src

Run script based on current major mode.

#+begin_src emacs-lisp :tangle yes
(defun run-script-without-args ()
  (interactive)
  (cond ((equal major-mode 'dired-mode) (dired-find-file) (run-script-without-args))
        ((equal major-mode 'python-mode) (princ (run-current-python "")))
        ((equal major-mode 'js-mode) (princ (run-current-javascript "")))
        ((equal major-mode 'julia-mode) (princ (run-current-julia "")))
        ((equal major-mode 'sh-mode) (princ (run-current-shell "")))
        ((equal major-mode 'org-mode) (org-babel-execute-src-block))
        (t (message "File type not supported."))))


(defun run-script-with-args (arguments)
  (interactive "MArguments: ")
  (cond ((equal major-mode 'dired-mode) (dired-find-file) (run-script-with-args arguments))
        ((equal major-mode 'python-mode) (princ (run-current-python arguments)))
        ((equal major-mode 'js-mode) (princ (run-current-javascript arguments)))
        ((equal major-mode 'julia-mode) (princ (run-current-julia arguments)))
        ((equal major-mode 'sh-mode) (princ (run-current-shell arguments)))
        ((equal major-mode 'org-mode) (org-babel-execute-src-block))
        (t (message "File type not supported."))))
#+end_src

Evil leader keybindings.

#+begin_src emacs-lisp :tangle no :noweb-ref script-leader
;; run scripts
(evil-leader/set-key "," #'run-script-without-args)
(evil-leader/set-key "'" #'run-script-without-args)


;; run scripts with arguments
(evil-leader/set-key "." #'run-script-with-args)
#+end_src

* Mail

#+begin_src emacs-lisp :tangle yes :noweb no-export
(use-package notmuch
  :config
  <<notmuch-keybindings>>)
#+end_src

Configure notmuch startup screen.

#+begin_src emacs-lisp :tangle yes
;; hide ugly notmuch logo
(setq-default notmuch-show-logo nil)
#+end_src

Configure to work with msmtp.

#+begin_src emacs-lisp :tangle yes
(setq-default send-mail-function 'sendmail-send-it
              sendmail-program "/usr/local/bin/msmtp"
              mail-specify-envelope-from t
              message-sendmail-envelope-from 'header
              mail-envelope-from 'header)
#+end_src

Use spellcheck in mail mode.

#+begin_src emacs-lisp :tangle yes
(add-hook 'mail-mode-hook #'flyspell-mode)
#+end_src

Key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref notmuch-keybindings
;; bind C-j properly
(evil-define-key 'normal notmuch-search-mode-map (kbd "C-j") #'notmuch-search-show-thread)


;; search by tag in notmuch
(evil-define-key 'normal notmuch-hello-mode-map (kbd "?") #'notmuch-search-by-tag)
#+end_src

Evil leader bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref mail-leader
;; open send mail buffer
(evil-leader/set-key "M" #'mail)

;; open read mail buffer
(evil-leader/set-key "1" #'(lambda (refresh-email)
                             (interactive "P")
                             (when refresh-email
                               (message "Refreshing email...")
                               (shell-command-to-string "mbsync gmail; notmuch new"))
                             (notmuch)))
#+end_src

* Files

** Dired

Get a list of marked files from all Dired buffers. [[https://emacs.stackexchange.com/a/64591/33585][Thanks Drew!]]

#+begin_src emacs-lisp :tangle yes
(defun get-all-marked-files-and-unmark ()
  "Return a list of marked files from all Dired buffers."
  (let ((files  ())
        (here   ()))
    (dolist (buf  (mapcar #'cdr dired-buffers))
      (with-current-buffer buf
        (setq here  (dired-get-marked-files nil nil nil t))
        (when (or (null (cdr here))  (eq t (car here)))
          (setq here  (cdr here)))
        (setq files  (nconc here files))
        (let ((inhibit-message t))
          (dired-unmark-all-marks))))
    (setq files  (delete-dups files))))
#+end_src

Make dired update automatically.

#+begin_src emacs-lisp :tangle yes
(add-hook 'dired-mode-hook #'auto-revert-mode)
#+end_src

Close dired buffers by default.

#+begin_src emacs-lisp :tangle yes
(setq-default dired-kill-when-opening-new-dired-buffer t)
#+end_src

Make dired stop showing as modified by default.

#+begin_src emacs-lisp :tangle yes
(add-hook 'dired-after-readin-hook #'(lambda () (set-buffer-modified-p nil)))
#+end_src

*** User interface

Remove weird face in dired. I couldn't avoid =custom-set-faces= for this one.

#+begin_src emacs-lisp :tangle yes
(custom-set-faces
 '(bookmark-face ((t nil))))
#+end_src

Show less information when opening dired (can be toggled with `(`).

#+begin_src emacs-lisp :tangle yes
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src

*** Backend

Use =gnu-ls= and numerical sorting.

#+begin_src emacs-lisp :tangle yes
(setq-default dired-use-ls-dired t)
(setq-default insert-directory-program "/usr/local/bin/gls")
(setq-default dired-listing-switches "-lGh1v --group-directories-first")


(defvar dired-show-hidden-files nil
  "Whether to show hidden files in dired.")


(defun toggle-dired-show-hidden-files ()
  "Toggle showing hidden dired files."
  (interactive)
  (if dired-show-hidden-files
      (progn
        (setq dired-listing-switches "-lGh1v --group-directories-first")
        (setq dired-show-hidden-files nil)
        (message "Hiding hidden files."))
    (setq dired-listing-switches "-lAGh1v --group-directories-first")
    (setq dired-show-hidden-files t)
    (message "Showing hidden files."))
  (let ((current-directory dired-directory))
    (kill-buffer)
    (dired current-directory)))
#+end_src

Fix to open file in default application (macOS).

#+begin_src emacs-lisp :tangle yes
(defun dired-open-in-default ()
  "Opens current file in default application.  `browse-url-of-dired-file` wasn't working."
  (interactive)
  (let ((marked-files (dired-get-marked-files)))
    (if (null marked-files)
        (shell-command (format "open '%s'" (dired-current-directory)))
      (dired-do-shell-command "open" 1 marked-files))))

(evil-define-key 'normal dired-mode-map "W" #'dired-open-in-default)
#+end_src

*** Key bindings

Make sure S-j, S-k, and C-j are bound correctly for dired.

#+begin_src emacs-lisp :tangle yes
(evil-define-key 'normal dired-mode-map "K" #'(lambda ()
                                                (interactive)
                                                (scroll-down 3)))
(evil-define-key 'normal dired-mode-map "J" #'(lambda ()
                                                (interactive)
                                                (scroll-up 3)))
(evil-define-key 'normal dired-mode-map (kbd "C-j") 'dired-find-file)
#+end_src

Make sure =q= works in dired-mode.

#+begin_src emacs-lisp :tangle yes
(evil-define-key 'normal 'dired-mode-map "q" 'evil-owl-record-macro)
#+end_src

Toggle showing hidden files.

#+begin_src emacs-lisp :tangle yes
(define-key dired-mode-map (kbd "<f5>") #'toggle-dired-show-hidden-files)
#+end_src

Evil leader keybindings.

#+begin_src emacs-lisp :tangle no :noweb-ref dired-leader
;; open dired at cwd or go up directory
(evil-leader/set-key "I" #'(lambda ()
                             (interactive)
                             (if (equal major-mode 'dired-mode)
                                 (dired-up-directory)
                               (dired "."))))


;; close current buffer and open dired at cwd or go up directory
(evil-leader/set-key "i" #'(lambda ()
                             (interactive)
                             (if (not (equal dired-directory "/"))
                                 (let ((old-buffer (current-buffer)))
                                   (if (equal major-mode 'dired-mode)
                                       (progn
                                         (dired-up-directory)
                                         (kill-buffer old-buffer))
                                     (dired "."))))))


;; open marked files in dired
(evil-leader/set-key "w" #'(lambda (open-all-marked)
                             (interactive "P")
                             (if (null open-all-marked)
                                 (shell-command (format "open '%s'" buffer-file-name))
                               (let ((files (get-all-marked-files-and-unmark)))
                                 (mapc #'browse-url files)
                                 (message "Unmarked %d files." (length files))))))


;; open desktop
(evil-leader/set-key "/" #'(lambda ()
                             (interactive)
                             (find-file (expand-file-name "~/Desktop/"))))
#+end_src

** PDFs/images

Revert buffer without confirmation.

#+begin_src emacs-lisp :tangle yes
(setq-default revert-without-query '(".pdf"))
(add-hook 'pdf-view-mode-hook #'auto-revert-mode)
#+end_src

Use =pdf-tools=.

#+begin_src emacs-lisp :tangle yes
(defvar pdf-hiding-cursor nil
  "Last buffer was a PDF and was hiding cursor.")


(use-package pdf-tools
  :config


  (add-hook 'pdf-view-mode-hook
            #'(lambda ()
                (internal-show-cursor (get-buffer-window) t)
                (setq pdf-hiding-cursor t)))

  (add-hook 'post-command-hook
            #'(lambda ()
                (when (and pdf-hiding-cursor (not (equal major-mode 'pdf-view-mode)))
                  (internal-show-cursor (get-buffer-window) t))))


  (pdf-tools-install))
#+end_src

Scale images in image mode

#+begin_src emacs-lisp :tangle yes
(define-key image-mode-map (kbd "g =") 'image-increase-size)
(define-key image-mode-map (kbd "g -") 'image-decrease-size)
#+end_src

Use dark mode.

#+begin_src emacs-lisp :tangle yes
;; (add-hook 'pdf-view-mode-hook #'(lambda ()
;;                                   (pdf-view-themed-minor-mode 1)))
#+end_src

* Org

Make sure all code is run after org mode is loaded.

#+begin_src emacs-lisp :tangle yes :noweb no-export
(use-package org
  :hook ((org-mode . flyspell-mode)
         (text-mode . flyspell-mode))
  :init
  (setq-default org-emphasis-regexp-components
                '("   ('\"{\x200B" "-     .,:!?;'\")}\\[\x200B" " ,\"'" "." 20))
  
  :config
  (require 'ox)

  <<org-mode-variables>>
  <<org-mode-config>>
  <<org-mode-compilation>>
  <<org-mode-emphasis-markers>>
  <<org-mode-greek>>
  <<org-mode-keybindings>>
  <<org-mode-faces>>
  <<org-mode-references>>
  <<autocorrect-words>>
  <<python-babel>>
  <<org-capture-popup>>
  <<org-mode-extend-emphasis>>)
#+end_src

Set defaults.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-variables
(setq-default org-return-follows-link nil)
(setq-default org-src-preserve-indentation t)
(setq-default org-src-window-setup 'current-window)
(setq-default org-src-tab-acts-natively t)
(setq-default org-html-htmlize-output-type 'css)


;; prevent org from splitting line on meta return       
(setq-default org-M-RET-may-split-line nil)


;; pretty LaTeX entities for org mode
(setq-default org-pretty-entities t)


;; prevent confirmation prompt when executing code blocks
(setq-default org-confirm-babel-evaluate nil)


;; prevent section indentation
(setq-default org-adapt-indentation nil)


;; prevent section numbering in exports
(setq-default org-export-with-section-numbers nil)


;; show markdown for org-mode
(setq-default org-hide-emphasis-markers nil)


;; use different ellipsis for folded content
(setq-default org-ellipsis " [...]")


;; make sure to color latex
(setq-default org-highlight-latex-and-related '(latex script entities))


;; latex formatting
(setq-default org-format-latex-options '(:foreground default
                                                     :background default
                                                     :scale 1.0
                                                     :html-foreground "Black"
                                                     :html-background "Transparent"
                                                     :html-scale 0.4
                                                     :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))


;; prevent html export from having postamble
(setq-default org-html-postamble nil)


;; remove table of contents from export
(setq-default org-export-with-toc nil)


;; use smart quotation marks
(setq-default org-export-with-smart-quotes t)


;; stop displaying inline images in org-mode
(setq-default org-startup-with-inline-images nil)
;; (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)


;; default image width 
(setq-default org-image-actual-width 600)


;; change MathJax formatting
(setf org-html-mathjax-options
      '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
        (scale "90") 
        (align "center") 
        (indent "2em")
        (mathml nil)))
#+end_src

Use section numbering.

#+begin_src emacs-lisp :tangle yes
(defun org-section-num-format (numbering)
  (if (= (length numbering) 1)
      (propertize (concat (mapconcat
                           #'number-to-string
                           numbering ".") " | " )
                  'face `(:family "Victor Mono"
                                  :height 140
                                  :foreground ,color-darkish-subdued))
    (propertize (concat (mapconcat
                         #'number-to-string
                         numbering ".") " — " )
                'face `(:family "Victor Mono"
                                :height 140
                                :foreground ,color-dark-subdued))))


(font-lock-add-keywords 'org-mode
                        `(("^*+ " . 'org-meta-line)))


(setq-default org-num-format-function #'org-section-num-format)


(add-hook 'org-mode-hook #'org-num-mode)
#+end_src

** Compilation

Compile all org files with a given name into one file (recursive).

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-compilation
(defun replace-all (regexp string)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward regexp nil t)
      (replace-match string))))

(defun org-compile-files (dir regexp title)
  (interactive "DWhich directory? \nsWhich files? \nsWhat title? ")
  (let ((files (directory-files-recursively dir regexp))
        (output-path (concat dir "compilation.org")))
    (write-region (format "#+title: %s\n\n" title) nil output-path)
    (mapc (lambda (file)
            (with-temp-buffer
              (insert-file-contents file)
              (replace-all "^\\*\\(\\** \\)" "**\\1")
              (replace-all "#\\+title: \\(.+\\)" "* \\1")
              (goto-char (point-max))
              (newline)
              (append-to-file (point-min) (point-max) output-path)))
          files)
    (find-file output-path)))
#+end_src

** Capture

Stop creating bookmarks.

#+begin_src emacs-lisp :tangle yes
(setq-default org-capture-bookmark nil)
#+end_src

Make sure capture is the only window.

#+begin_src emacs-lisp :tangle yes
(add-hook 'org-capture-mode-hook #'(lambda ()
                                     (delete-other-windows)
                                     (evil-insert-state)
                                     (setq-local header-line-format nil)))
#+end_src

Customize org capture popup.

#+begin_src emacs-lisp :tangle no :noweb-ref org-capture-popup
(defun org-capture-select-template (&optional keys)
  "Select a capture template.
Lisp programs can force the template by setting KEYS to a string."
  (let ((org-capture-templates
         (or (org-contextualize-keys
              (org-capture-upgrade-templates org-capture-templates)
              org-capture-templates-contexts)
             '(("t" "Task" entry (file+headline "" "Tasks")
                "* TODO %?\n  %u\n  %a")))))
    (if keys
        (or (assoc keys org-capture-templates)
            (error "No capture template referred to by \"%s\" keys" keys))
      (org-mks org-capture-templates
               (concat
                "Select a capture template\n"
                (make-string 25 9472))
               "Template key: "
               '(("C" "Customize org-capture-templates")
                 ("q" "Abort"))))))


(defun org-mks (table title &optional prompt specials)
  "Select a member of an alist with multiple keys.

TABLE is the alist which should contain entries where the car is a string.
There should be two types of entries.

1. prefix descriptions like (\"a\" \"Description\")
   This indicates that `a' is a prefix key for multi-letter selection, and
   that there are entries following with keys like \"ab\", \"ax\"...

2. Select-able members must have more than two elements, with the first
   being the string of keys that lead to selecting it, and the second a
   short description string of the item.

The command will then make a temporary buffer listing all entries
that can be selected with a single key, and all the single key
prefixes.  When you press the key for a single-letter entry, it is selected.
When you press a prefix key, the commands (and maybe further prefixes)
under this key will be shown and offered for selection.

TITLE will be placed over the selection in the temporary buffer,
PROMPT will be used when prompting for a key.  SPECIALS is an
alist with (\"key\" \"description\") entries.  When one of these
is selected, only the bare key is returned."
  (save-window-excursion
    (let ((inhibit-quit t)
          (buffer (org-switch-to-buffer-other-window "*Org Select*"))
          (prompt (or prompt "Select: "))
          case-fold-search
          current)
      (setq-local olivetti-body-width 50)
      (olivetti-mode 1)
      (unwind-protect
          (catch 'exit
            (while t
              (erase-buffer)
              (insert title "\n\n")
              (let ((des-keys nil)
                    (allowed-keys '("\C-g"))
                    (tab-alternatives '("\s" "\t" "\r"))
                    (cursor-type nil))
                ;; Populate allowed keys and descriptions keys
                ;; available with CURRENT selector.
                (let ((re (format "\\`%s\\(.\\)\\'"
                                  (if current (regexp-quote current) "")))
                      (prefix (if current (concat current " ") "")))
                  (dolist (entry table)
                    (pcase entry
                      ;; Description.
                      (`(,(and key (pred (string-match re))) ,desc)
                       (let ((k (match-string 1 key)))
                         (push k des-keys)
                         ;; Keys ending in tab, space or RET are equivalent.
                         (if (member k tab-alternatives)
                             (push "\t" allowed-keys)
                           (push k allowed-keys))
                         (insert prefix "[" k "]" "..." "  " desc "..." "\n")))
                      ;; Usable entry.
                      (`(,(and key (pred (string-match re))) ,desc . ,_)
                       (let ((k (match-string 1 key)))
                         (insert prefix "[" k "]" "     " desc "\n")
                         (push k allowed-keys)))
                      (_ nil))))
                ;; Insert special entries, if any.
                (when specials
                  (insert (concat "\n" (make-string (- (window-width) 1) 9472) "\n" "\n"))
                  (pcase-dolist (`(,key ,description) specials)
                    (insert (format "[%s]     %s\n" key description))
                    (push key allowed-keys)))
                ;; Display UI and let user select an entry or
                ;; a sub-level prefix.
                (goto-char (point-min))
                (org-fit-window-to-buffer)
                (message "") ; With this line the prompt appears in
                                        ; the minibuffer. Else keystrokes may
                                        ; appear, which is spurious.
                (let ((pressed (org--mks-read-key
                                allowed-keys prompt
                                (not (pos-visible-in-window-p (1- (point-max)))))))
                  (setq current (concat current pressed))
                  (cond
                   ((equal pressed "\C-g") (user-error "Abort"))
                   ;; Selection is a prefix: open a new menu.
                   ((member pressed des-keys))
                   ;; Selection matches an association: return it.
                   ((let ((entry (assoc current table)))
                      (and entry (throw 'exit entry))))
                   ;; Selection matches a special entry: return the
                   ;; selection prefix.
                   ((assoc current specials) (throw 'exit current))
                   (t (error "No entry available")))))))
        (when buffer (kill-buffer buffer))))))


;; stop opening new window
(defun org-switch-to-buffer-other-window (&rest args)
  "Switch to buffer in a second window on the current frame.
In particular, do not allow pop-up frames.
Returns the newly created buffer."
  (org-no-popups (apply #'switch-to-buffer args)))
#+end_src

Templates.

#+begin_src emacs-lisp :tangle yes
(setq-default org-capture-templates
              '(("g" "General" entry (file+headline "~/Documents/Education/schedule.org" "General")
                 "*** TODO %?")
                ("m" "Meeting" entry (file+headline "~/Documents/Education/schedule.org" "General")
                 "*** %?  :meeting:")
                ("s" "Sociology" entry (file+headline "~/Documents/Education/schedule.org" "Sociology")
                 "*** TODO %?")
                ("f" "Family Finance" entry (file+headline "~/Documents/Education/schedule.org" "Family Finance")
                 "*** TODO %?")
                ("c" "Calculus" entry (file+headline "~/Documents/Education/schedule.org" "Calculus")
                 "*** TODO %?")
                ("y" "Mythology" entry (file+headline "~/Documents/Education/schedule.org" "Mythology")
                 "*** TODO %?")
                ("j" "Major" entry (file+headline "~/Documents/Education/schedule.org" "Major")
                 "*** TODO %?")
                ("e" "Emacs" entry (file+headline "~/Documents/Education/schedule.org" "Emacs")
                 "*** TODO %?")))
#+end_src
 
#+begin_src emacs-lisp :tangle no :noweb-ref capture-leader
(evil-leader/set-key "c" #'org-capture)
#+end_src

** User interface

Code to show emphasis markers using a particular face.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-emphasis-markers
;; change face for emphasis markers
(defface org-emphasis-marker '((t (:inherit shadow)))
  "Face for Org emphasis markers"
  :group 'org-faces)


(defun org-do-emphasis-faces (limit)
  "Run through the buffer and emphasize strings."
  (require 'org-macs)
  (require 'org-compat)
  (let ((quick-re (format "\\([%s]\\|^\\)\\([~=*/_+]\\)"
                          (car org-emphasis-regexp-components))))
    (catch :exit
      (while (re-search-forward quick-re limit t)
        (let* ((marker (match-string 2))
               (verbatim? (member marker '("~" "="))))
          (when (save-excursion
                  (goto-char (match-beginning 0))
                  (and
                   ;; Do not match table hlines.
                   (not (and (equal marker "+")
                             (org-match-line
                              "[ \t]*\\(|[-+]+|?\\|\\+[-+]+\\+\\)[ \t]*$")))
                   ;; Do not match headline stars.  Do not consider
                   ;; stars of a headline as closing marker for bold
                   ;; markup either.
                   (not (and (equal marker "*")
                             (save-excursion
                               (forward-char)
                               (skip-chars-backward "*")
                               (looking-at-p org-outline-regexp-bol))))
                   ;; Match full emphasis markup regexp.
                   (looking-at (if verbatim? org-verbatim-re org-emph-re))
                   ;; Do not span over paragraph boundaries.
                   (not (string-match-p org-element-paragraph-separate
                                        (match-string 2)))
                   ;; Do not span over cells in table rows.
                   (not (and (save-match-data (org-match-line "[ \t]*|"))
                             (string-match-p "|" (match-string 4))))))
            (pcase-let ((`(,_ ,face ,_) (assoc marker org-emphasis-alist)))
              (font-lock-prepend-text-property
               (match-beginning 2) (match-end 2) 'face face)
              (when verbatim?
                (org-remove-flyspell-overlays-in
                 (match-beginning 0) (match-end 0))
                (remove-text-properties (match-beginning 2) (match-end 2)
                                        '(display t invisible t intangible t)))
              (add-text-properties (match-beginning 2) (match-end 2)
                                   '(font-lock-multiline t org-emphasis t)))

            ;; Begin new code
            (font-lock-prepend-text-property
             (match-beginning 3) (match-end 3) 'face 'org-emphasis-marker)
            (font-lock-prepend-text-property
             (match-end 4) (match-beginning 5) 'face 'org-emphasis-marker)
            ;; End new code

            (when org-hide-emphasis-markers
              (add-text-properties (match-end 4) (match-beginning 5)
                                   '(invisible org-link))
              (add-text-properties (match-beginning 3) (match-end 3)
                                   '(invisible org-link))))
          (throw :exit t))))))

;; thanks, https://www.reddit.com/r/emacs/comments/eipbvk/org_emphasis_marker_face/
#+end_src

Use other font for Greek text.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-greek
;; not necessarily the best approach, but it works
(add-hook 'org-mode-hook #'(lambda ()
                             (set-fontset-font t 'greek (font-spec :family "Helvetica" :weight 'normal :height 0.75))))

#+end_src

Use variable pitch in org buffers.

#+begin_src emacs-lisp :tangle yes
(use-package mixed-pitch
  :config
  (setq-default mixed-pitch-set-height t)
  (set-face-attribute 'variable-pitch nil :height 1.15))
#+end_src

Hide source blocks by default (thanks, https://emacs.stackexchange.com/a/7366).

#+begin_src emacs-lisp :tangle yes
(defvar org-blocks-hidden nil)

(defun org-toggle-blocks ()
  (interactive)
  (if org-blocks-hidden
      (org-show-block-all)
    (org-hide-block-all))
  (setq-local org-blocks-hidden (not org-blocks-hidden)))

(add-hook 'org-mode-hook #'org-toggle-blocks)
#+end_src

Customize faces.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-faces
(set-face-attribute 'org-block-begin-line nil
                    :extend t
                    :background color-background
                    :foreground color-dark-subdued)


(set-face-attribute 'org-block nil
                    :foreground "#fdf4c1"
                    :background "#121112")


(set-face-attribute 'org-code nil
                    :inherit 'shadow)


(set-face-attribute 'org-document-info-keyword nil
                    :inherit 'shadow)


(set-face-attribute 'org-document-title nil
                    :weight 'bold
                    :family "Optima"
                    :height 190
                    :foreground color-foreground)


(set-face-attribute 'org-link nil
                    :inherit 'custom-link)


(set-face-attribute 'org-meta-line nil
                    :foreground color-dark-subdued)


(set-face-attribute 'org-property-value nil
                    :inherit nil
                    :foreground color-medium-subdued)


(set-face-attribute 'org-special-keyword nil
                    :inherit 'font-lock-comment-face
                    :foreground color-medium-subdued)


(set-face-attribute 'org-todo nil
                    :weight 'bold
                    :foreground color-dark-brown)


(set-face-attribute 'org-verbatim nil
                    :inherit 'shadow
                    :foreground color-light-green)


(set-face-attribute 'outline-1 nil
                    :extend t
                    :height 180
                    :weight 'bold
                    :foreground color-light-subdued
                    :family "Optima")


(set-face-attribute 'outline-2 nil
                    :extend t
                    :height 160
                    :weight 'bold
                    :foreground color-light-subdued
                    :family "Optima")


(set-face-attribute 'outline-3 nil
                    :extend t
                    :height 160
                    :weight 'bold
                    :foreground color-light-subdued
                    :family "Optima")


(set-face-attribute 'outline-4 nil
                    :extend t
                    :height 160
                    :weight 'bold
                    :foreground color-light-subdued
                    :family "Optima")


(set-face-attribute 'outline-5 nil
                    :extend t
                    :height 160
                    :weight 'bold
                    :foreground color-light-subdued
                    :family "Optima")


(set-face-attribute 'outline-6 nil
                    :extend t
                    :height 160
                    :weight 'bold
                    :foreground color-light-subdued
                    :family "Optima")


(set-face-attribute 'outline-7 nil
                    :extend t
                    :height 160
                    :weight 'bold
                    :foreground color-light-subdued
                    :family "Optima")


(set-face-attribute 'outline-8 nil
                    :extend t
                    :height 160
                    :weight 'bold
                    :foreground color-light-subdued
                    :family "Optima")


(set-face-attribute 'org-emphasis-marker nil
                    :foreground color-medium-subdued)


(set-face-attribute 'org-table nil
                    :foreground color-brown)


(set-face-attribute 'org-ellipsis nil
                    :foreground color-dark-subdued
                    :family "Victor Mono"
                    :height 120)


(set-face-attribute 'org-tag nil
                    :foreground color-dark-subdued
                    :height 140)


(set-face-attribute 'org-checkbox nil
                    :foreground color-brown
                    :height 140)


(set-face-attribute 'org-latex-and-related nil
                    :foreground color-green
                    :weight 'bold)
#+end_src

** Editing

Add =evil-embrace= pairs to org mode.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-embrace
(add-hook 'org-mode-hook (lambda ()
                           (delete ?b evil-embrace-evil-surround-keys)

                           (embrace-add-pair ?i "/" "/")
                           (embrace-add-pair ?b "*" "*")
                           (embrace-add-pair ?u "_" "_")
                           (embrace-add-pair ?c "=" "=")))
#+end_src

Display entities in current line (thanks [[https://www.reddit.com/r/emacs/comments/i9pfld/disable_orgprettyentities_on_the_current_line/][Reddit]]).

#+begin_src emacs-lisp :tangle yes
(defvar my/current-line '(0 . 0)
  "(start . end) of current line in current buffer")
(make-variable-buffer-local 'my/current-line)


(defun my/unhide-current-line (limit)
  "Font-lock function"
  (let ((start (max (point) (car my/current-line)))
        (end (min limit (cdr my/current-line))))
    (when (< start end)
      (remove-text-properties start end '(invisible t display "" composition ""))
      (goto-char limit)
      t)))


(defun my/refontify-on-linemove ()
  "Post-command-hook"
  (let* ((start (line-beginning-position))
         (end (line-beginning-position 2))
         (needs-update (not (equal start (car my/current-line)))))
    (setq my/current-line (cons start end))
    (when needs-update
      (font-lock-fontify-block 2))))


(defun my/entity-unhighlight ()
  "Install"
  (font-lock-add-keywords nil '((my/unhide-current-line)) t)
  (add-hook 'post-command-hook #'my/refontify-on-linemove nil t))

(add-hook 'org-mode-hook #'my/entity-unhighlight)
#+end_src

Make sure emphasis works across multiple lines.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-extend-emphasis
#+end_src

Copy text without newlines (useful due to auto-fill mode).

#+begin_src emacs-lisp :tangle yes
(evil-define-operator evil-yank-no-newlines (beg end type register yank-handler)
  "Yank text from BEG to END with TYPE while stripping newlines."
  :move-point nil
  :repeat nil
  (interactive "<R><x><y>")
  (let ((evil-was-yanked-without-register
         (and evil-was-yanked-without-register (not register))))
    (let ((old-buffer (current-buffer)))
      (with-temp-buffer
        (insert-buffer-substring old-buffer beg end)
        (let ((fill-column (point-max)))
          (fill-region (point-min) (point-max)))
      (cond
       ((eq type 'block)
        (evil-yank-rectangle (point-min) (point-max) register yank-handler))
       ((memq type '(line screen-line))
        (evil-yank-lines (point-min) (point-max) register yank-handler))
       (t
        (evil-yank-characters (point-min) (point-max) register yank-handler)))))))


(evil-define-key 'visual org-mode-map "Y" 'evil-yank-no-newlines)
#+end_src

Blank table region (only works on one column at a time for now).

#+begin_src emacs-lisp :tangle yes
(defun org-table-blank-selected-fields ()
  (interactive)
  (let* ((start (region-beginning))
         (end (region-end))
         (start-line (line-number-at-pos start))
         (end-line (line-number-at-pos end))
         (line-count (- end-line start-line)))
    (save-excursion
      (goto-char start)
      (dotimes (_ line-count)
        (org-table-blank-field)
        (next-line))
      (org-table-blank-field))))


(evil-define-key 'visual org-mode-map (kbd "RET") #'org-table-blank-selected-fields)
#+end_src

Auto-capitalize words.

#+begin_src emacs-lisp :tangle yes
(use-package auto-capitalize
  :load-path "lisp/"
  :hook (org-mode . auto-capitalize-mode)

  :config
  (setq-default auto-capitalize-predicate
                #'(lambda ()
                    (and (not (texmathp))
                         (not (org-in-src-block-p))))))
#+end_src

** Key bindings

Set key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-keybindings
;; make sure C-; works in org-mode
(define-key org-mode-map (kbd "C-;") #'eval-expression)
(define-key flyspell-mode-map (kbd "C-;") #'eval-expression)


;; use RET for newline and to fill paragraph
(define-key org-mode-map (kbd "<RET>")
  #'(lambda ()
      (interactive)
      (newline)
      (when (equal (char-before (- (point) 1)) ?\C-j)
        (fill-paragraph))))


;; toggle link display
(define-key org-mode-map (kbd "<f8>") #'org-toggle-link-display)


;; compile org files
(define-key org-mode-map (kbd "<f4>") #'org-compile-files)
(define-key dired-mode-map (kbd "<f4>") #'org-compile-files)


;; define term in notes
(evil-define-key 'visual org-mode-map (kbd "C-d") #'org-note-create-definition)
(evil-define-key 'normal org-mode-map (kbd "C-d") #'(lambda ()
                                                      (interactive)
                                                      (org-note-create-definition nil nil)))


;; make sure C-i works like TAB
(define-key org-mode-map (kbd "C-i") #'org-cycle)
(evil-define-key 'normal org-mode-map (kbd "C-i") #'org-cycle)
(evil-define-key 'visual org-mode-map (kbd "C-i") #'org-cycle)


;; schedule todo items
(evil-define-key 'normal org-mode-map (kbd "g s") #'org-schedule)


;; set todo item deadlines
(evil-define-key 'normal org-mode-map (kbd "g d") #'org-deadline)


;; set tag
(evil-define-key 'normal org-mode-map (kbd "g t") #'org-set-tags-command)


;; save and close org capture
(evil-define-key 'normal org-capture-mode-map (kbd "g f") #'org-capture-finalize)


;; save and close org capture
(evil-define-key 'normal org-capture-mode-map (kbd "g q") #'org-capture-kill)


;; use org-specific jump back
(evil-define-key 'normal org-mode-map (kbd "C-o") #'org-mark-ring-goto)


;; fix paragraph navigation
(evil-define-key 'normal org-mode-map (kbd "] ]" ) #'evil-forward-section-begin)
(evil-define-key 'normal org-mode-map (kbd "[ [" ) #'evil-backward-section-begin)


;; move headings
(evil-define-key 'normal org-mode-map (kbd "C-M-k") #'org-metaup)
(evil-define-key 'normal org-mode-map (kbd "C-M-j") #'org-metadown)


;; meta return in normal mode
(evil-define-key 'normal org-mode-map (kbd "g o") #'(lambda ()
                                                      (interactive)
                                                      (end-of-line)
                                                      (org-meta-return)
                                                      (evil-insert-state)))


;; create headings
(evil-define-key 'normal org-mode-map (kbd "C-n")
  #'(lambda ()
      (interactive)
      (org-insert-heading-respect-content)
      (evil-insert-state)))


;; create new todo haeding
(evil-define-key 'normal org-mode-map (kbd "C-t")
  #'(lambda ()
      (interactive)
      (org-insert-todo-heading-respect-content)
      (evil-insert-state)))


;; copy cell contents
(evil-define-key 'normal org-mode-map (kbd "C-c C-y")
  #'(lambda ()
      (interactive)
      (when (org-at-table-p)
        (kill-new
         (string-trim
          (substring-no-properties (org-table-get-field))))
        (message "Copied cell contents."))))


;; toggle source block visibility 
(define-key org-mode-map (kbd "<f12>") #'org-toggle-blocks)


;; create org-mode links across files
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c C-l") #'org-insert-link)


;; use `g j' and `g k' for navigating lists
(add-hook 'org-mode-hook (lambda ()
                           (define-key evil-normal-state-local-map (kbd "g j") #'org-shiftdown)
                           (define-key evil-normal-state-local-map (kbd "g k") #'org-shiftup)))


;; export English text
(define-key org-mode-map (kbd "<f5>") #'export-colored)


;; use C-S-j as M-RET
(define-key org-mode-map (kbd "C-M-j") 'org-meta-return)


;; make sure `z j` and `z k` are properly bound
(evil-define-key 'normal org-mode-map (kbd "z j") #'open-line-down)
(evil-define-key 'normal org-mode-map (kbd "z k") #'open-line-up)


;; make sure that window switching works
(evil-define-key 'normal org-mode-map (kbd "M-h") 'evil-window-left)
(evil-define-key 'normal org-mode-map (kbd "M-j") 'evil-window-down)
(evil-define-key 'normal org-mode-map (kbd "M-k") 'evil-window-up)
(evil-define-key 'normal org-mode-map (kbd "M-l") 'evil-window-right)
#+end_src

Better integration with evil.

#+begin_src emacs-lisp :tangle yes
(use-package org-evil)
#+end_src

Add evil leader key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-leader
;; export org/latex file as HTML
(evil-leader/set-key "h" #'(lambda ()
                             (interactive)
                             (if (equal major-mode 'org-mode)
                                 (export-and-open-html)
                               (if (equal major-mode 'latex-mode)
                                   (call-interactively 'TeX-command-run-all)
                                 (browse-url-of-file)))))


;; export org/latex file as PDF
(defvar org-pdf-separate-window '())

(add-hook 'after-save-hook #'(lambda ()
                               (if (and (equal major-mode 'org-mode)
                                        (memq (buffer-name) org-pdf-separate-window))
                                   (org-export-pdf-update))))

(evil-leader/set-key "P" #'(lambda (separate-window)
                             (interactive "P")
                             (if (equal separate-window 1)
                                 (if (memq (buffer-name) org-pdf-separate-window)
                                     (setq org-pdf-separate-window (delete (buffer-name) org-pdf-separate-window))
                                   (push (buffer-name) org-pdf-separate-window))
                               (if (equal major-mode 'org-mode)
                                   (export-and-open-pdf separate-window)
                                 (if (equal major-mode 'latex-mode)
                                     (call-interactively 'TeX-command-run-all)
                                   (browse-url-of-file))))))


;; fill paragraph
(evil-leader/set-key "p" #'fill-paragraph)


;; open links
(evil-leader/set-key "o" #'(lambda ()
                             (interactive)
                             (cond
                              ((equal major-mode 'org-mode) (org-open-at-point))
                              ((equal major-mode 'notmuch-show-mode) (shr-browse-url)))))


;; convenient way to toggle latex preview in org-mode
(evil-leader/set-key "l" #'org-latex-preview)


;; convenient way to execute all code blocks at once
(evil-leader/set-key "\"" 'org-babel-execute-buffer)


;; edit in separate buffer
(evil-leader/set-key "`" (lambda ()
                           (interactive)
                           (if (not (equal major-mode 'org-mode))
                               (org-edit-src-exit)
                             (org-edit-special))))


;; org babel tangle
(evil-leader/set-key "SPC" 'org-babel-tangle)
#+end_src

** Packages

*** Org download

Drag and drop images.

#+begin_src emacs-lisp :tangle yes
(use-package org-download
  :config
  (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src

*** Helm org

Configuration for =helm-org=.

#+begin_src emacs-lisp :tangle yes
(use-package helm-org
  :config
  (evil-define-key 'normal org-mode-map "?" #'helm-org-in-buffer-headings))
#+end_src

*** Org agenda

Org agenda variables.

#+begin_src emacs-lisp :tangle no :noweb-ref org-agenda-variables
;; set directory for global org files
(setq-default org-agenda-files '("~/Documents/Education/schedule.org"
                                 "~/Documents/general.org"
                                 "~/Documents/calendar.org"))


;; open org-agenda in the same window
(setq-default org-agenda-window-setup 'current-window)


;; stop showing warnings for deadlines
(setq-default org-agenda-skip-deadline-prewarning-if-scheduled t)


;; make sure the week starts on Sunday
(setq-default org-agenda-start-on-weekday nil)


;; hide deadlines by default
(setq-default org-agenda-include-deadlines nil)


;; customize "now" string for agenda view; "King of the moment"
(setq-default org-agenda-current-time-string "───*─*─  ♚  ─*─*───")
(setq-default org-agenda-time-grid
              '((daily today require-timed)
                (800 1000 1200 1400 1600 1800 2000)
                "......" "--------------------"))


;; hide tags from agenda items
(setq-default org-agenda-remove-tags t)


;; set org agenda item display
(setq-default org-agenda-prefix-format '((agenda . "  %-12:c%?-12t")
                                         (timeline . "  % s")
                                         (todo . " %i %-12:c")
                                         (tags . " %i %-12:c")
                                         (search . " %i %-12:c")))


;; add line dividers between dates
(setq-default org-agenda-format-date (lambda (date) (concat "\n"
                                                            (make-string 68 9472)
                                                            "\n"
                                                            (org-agenda-format-date-aligned date))))


;; set heading
(setq-default org-agenda-overriding-header "")


;; set tag alignment column
(setq-default org-tags-column 60)
(setq-default org-agenda-tags-column 60)
#+end_src

Org agenda faces.

#+begin_src emacs-lisp :tangle no :noweb-ref org-agenda-faces
(set-face-attribute 'org-agenda-date nil
                    :foreground color-medium-subdued
                    :weight 'normal)


(set-face-attribute 'org-agenda-date-today nil
                    :foreground color-foreground
                    :weight 'normal)


(set-face-attribute 'org-agenda-date-weekend nil
                    :foreground color-darkish-subdued
                    :weight 'normal)


(set-face-attribute 'org-scheduled nil
                    :foreground color-medium-subdued)


(set-face-attribute 'org-scheduled-today nil
                    :foreground "#fdf4c1")


(set-face-attribute 'org-scheduled-previously nil
                    :foreground "#fdf4c1"
                    :weight 'normal)


(set-face-attribute 'org-agenda-structure nil
                    :foreground "#bdb491"
                    :weight 'ultra-bold)
#+end_src

Use Olivetti mode in agenda.

#+begin_src emacs-lisp :tangle yes
(add-hook 'org-agenda-mode-hook #'(lambda ()
                                    (olivetti-set-width 70)
                                    (olivetti-mode 1)
                                    (setq default-mode-line-format mode-line-format)
                                    (setq mode-line-format nil)))
#+end_src

Org agenda hooks.

#+begin_src emacs-lisp :tangle no :noweb-ref org-agenda-hooks
(add-hook 'org-agenda-mode-hook
          #'(lambda ()
              (hl-line-mode 1)
              (setq-local evil-normal-state-cursor '("#151719" bar))))


;; move cursor to first item
(advice-add 'org-agenda-list :after #'(lambda (&rest args)
                                        (org-agenda-next-item 1)))
#+end_src

Org agenda key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref org-agenda-keybindings
;; make sure normal state is enabled by default in org agenda
(evil-set-initial-state 'org-agenda-mode 'normal)


;; open agenda from calendar
(evil-define-key 'normal calendar-mode-map (kbd "g l") #'org-calendar-goto-agenda)


;; use j k to navigate items
(evil-define-key 'normal org-agenda-mode-map (kbd "j")
  #'(lambda ()
      (interactive)
      (org-agenda-next-item 1)
      (beginning-of-line)))
(evil-define-key 'normal org-agenda-mode-map (kbd "k")
  #'(lambda ()
      (interactive)
      (org-agenda-previous-item 1)
      (beginning-of-line)))


;; save all org buffers from agenda
(evil-define-key 'normal org-agenda-mode-map (kbd "g s") #'org-save-all-org-buffers)


;; open agenda item with return in normal state
(evil-define-key 'normal org-agenda-mode-map (kbd "C-j") #'org-agenda-switch-to)
(evil-define-key 'normal org-agenda-mode-map (kbd "RET") #'org-agenda-switch-to)


;; toggle todo
(evil-define-key 'normal org-agenda-mode-map (kbd "t") #'org-agenda-todo)


;; reschedule task
(evil-define-key 'normal org-agenda-mode-map (kbd "s") #'org-agenda-schedule)


;; reload
(evil-define-key 'normal org-agenda-mode-map (kbd "r") #'org-agenda-redo)


;; filter by current category
(evil-define-key 'normal org-agenda-mode-map (kbd "c") #'org-agenda-filter-by-category)


;; inverse filter by current category
(evil-define-key 'normal org-agenda-mode-map (kbd "-")
  #'(lambda ()
      (interactive)
      (org-agenda-filter-by-category t)))


;; set priority
(evil-define-key 'normal org-agenda-mode-map (kbd ",") #'org-agenda-priority)


;; set day view
(evil-define-key 'normal org-agenda-mode-map (kbd ".") #'org-agenda-day-view)


;; set week view
(evil-define-key 'normal org-agenda-mode-map (kbd "w") #'org-agenda-week-view)


;; set fortnight view
(evil-define-key 'normal org-agenda-mode-map (kbd "F") #'org-agenda-fortnight-view)


;; goto date
(evil-define-key 'normal org-agenda-mode-map (kbd "f") #'org-agenda-goto-date)


;; delete item
(evil-define-key 'normal org-agenda-mode-map (kbd "D") #'org-agenda-kill)


;; set deadline
(evil-define-key 'normal org-agenda-mode-map (kbd "d") #'org-agenda-deadline)


;; toggle deadlines
(evil-define-key 'normal org-agenda-mode-map (kbd "g d") #'org-agenda-toggle-deadlines)


;; filter
(evil-define-key 'normal org-agenda-mode-map (kbd "/") #'org-agenda-filter)


;; add tag
(evil-define-key 'normal org-agenda-mode-map (kbd "'") #'org-agenda-set-tags)


;; add and display text related to item
(evil-define-key 'normal org-agenda-mode-map (kbd "E") #'org-agenda-add-note)
(evil-define-key 'normal org-agenda-mode-map (kbd "e") #'org-agenda-entry-text-mode)


;; exit agenda
(evil-define-key 'normal org-agenda-mode-map (kbd "x") #'org-agenda-exit)
#+end_src

Org agenda evil leader key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref org-agenda-leader
;; open agenda without calendar; the proper way to do this is with a custom view
(evil-leader/set-key "a" #'(lambda ()
                             (interactive)
                             (let ((org-agenda-category-filter-preset '("-Calendar")))
                               (org-agenda-list))))


(evil-leader/set-key "A" #'org-agenda-list)
#+end_src

#+begin_src emacs-lisp :tangle yes :noweb no-export
(with-eval-after-load 'org-agenda
  <<org-agenda-variables>>
  <<org-agenda-faces>>
  <<org-agenda-hooks>>
  <<org-agenda-keybindings>>)
#+end_src

*** Olivetti

Use Olivetti.

#+begin_src emacs-lisp :tangle yes
(use-package olivetti)
#+end_src

Distraction-free environment.

#+begin_src emacs-lisp :tangle yes
(defun message-filter-center (args)
  "Center message string.
This is a :filter-args advice for `message`."
  (if (car args)
      (with-current-buffer (window-buffer (minibuffer-window))
        (let* ((str (apply #'format-message args))
               (filler (make-string (max 0 (/ (- (window-width (minibuffer-window)) (string-width str)) 2)) ? )))
          (list "%s%s" filler str)))
    args))


(defun org-detect-distraction-free-keyword ()
  (pcase (org-collect-keywords '("DFREE"))
    (`(("DFREE" . ,val))
     (when (not (equal (car val) "nil"))
       (distraction-free nil)))
    (-
     (when (not (equal (buffer-name) "*scratch*"))
       (distraction-free nil)))))


(add-hook 'org-mode-hook #'org-detect-distraction-free-keyword)


(defun distraction-free (use-mixed-pitch &optional no-spell)
  (interactive "P")
  (if (equal olivetti-mode nil)
      (progn
        (when use-mixed-pitch
          (mixed-pitch-mode 1)
          (setq-local line-spacing 4))
        (setq-local default-mode-line-format mode-line-format)
        (setq-local mode-line-format nil)
        (olivetti-mode 1)
        (if (not no-spell)
            (flyspell-mode)))
    (mixed-pitch-mode 0)
    (olivetti-mode 0)
    (set-window-margins (get-buffer-window) 2)
    (setq-local mode-line-format default-mode-line-format)
    (setq-local line-spacing nil)))
#+end_src

Evil leader bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref olivetti-leader
(evil-leader/set-key "u" #'distraction-free)
#+end_src

*** Dictionary

#+begin_src emacs-lisp :tangle yes :noweb no-export
(use-package osx-dictionary
  :config
  <<dictionary-goto-function>>
  <<dictionary-display-functions>>
  <<dictionary-search-function>>)
#+end_src

Redefine function to open dictionary in the same window.

#+begin_src emacs-lisp :tangle no :noweb-ref dictionary-goto-function
(defun osx-dictionary--goto-dictionary (word)
  "Switch to osx-dictionary buffer in other window."
  (setq osx-dictionary-previous-window-configuration
        (current-window-configuration))
  (let* ((buffer (osx-dictionary--get-buffer word))
         (window (get-buffer-window buffer)))
    (if (null window)
        (switch-to-buffer buffer)
      (select-window window))))
#+end_src

Use Olivetti in buffer.

#+begin_src emacs-lisp :tangle no :noweb-ref dictionary-display-functions
(defun osx-dictionary--view-result (word)
  "Make buffer for the searching result of WORD."
  (if word
      (with-current-buffer (get-buffer-create
                            (funcall osx-dictionary-generate-buffer-name-function word))
        (let ((inhibit-read-only t))
          (erase-buffer)
          (let ((progress-reporter
                 (make-progress-reporter (format "Searching (%s)..." word)
                                         nil nil)))
            (insert (osx-dictionary--search word))
            (progress-reporter-done progress-reporter))
          (osx-dictionary--goto-dictionary word)
          (goto-char (point-min))

          (olivetti-set-width 70)
          (olivetti-mode 1)
          (mixed-pitch-mode 1)
          (setq default-mode-line-format mode-line-format)
          (setq mode-line-format nil)
          (setq line-spacing 4)

          (let ((buffer-read-only nil))
            (whitespace-cleanup))))
    (message "Nothing to look up")))


(defun osx-dictionary-quit ()
  "Quit osx-dictionary: reselect previously selected buffer."
  (interactive)
  (mixed-pitch-mode 0)
  (olivetti-mode 0)
  (setq mode-line-format default-mode-line-format)
  (set-window-margins (get-buffer-window) 2)
  (setq line-spacing nil)
  (if (window-configuration-p osx-dictionary-previous-window-configuration)
      (progn
        (set-window-configuration osx-dictionary-previous-window-configuration)
        (setq osx-dictionary-previous-window-configuration nil)
        (kill-buffer))
    (kill-buffer)))
#+end_src

Customize appearance.

#+begin_src emacs-lisp :tangle yes
(defface phonetics-lock
  '((t :family "Gentium Plus"))
  "Face for dictionary phonetics."
  :group 'osx-dictionary-mode)


(defvar phonetics-lock 'phonetics-lock
  "Face for dictionary phonetics.")


(setq-default osx-dictionary-mode-font-lock-keywords
              '(
                ;; Word class
                ("\\b\\(noun\\|adjective\\|det\\|verb\\|adverb\\|abbreviation\\|preposition\\|suffix\\|prefix\\|conjunction\\|symb\\)\\b" . font-lock-type-face)
                ;; Serial number
                ("^[0-9]+" . font-lock-builtin-face)
                ;; Phonetics
                ("|\\(.*\\)|" . phonetics-lock)
                ;; Dictionary comment
                ("^\\(DERIVATIVES\\|ORIGIN\\|PHRASES\\)" . font-lock-comment-face)))


;; center header
(defun center-header (header)
  "Center HEADER string."
  (let ((header-length 70))
    (append
     `(,(make-string (- (/ (window-total-width) 2)
                        (/ header-length 2))
                     (string-to-char " ")))
     header)))


(define-derived-mode osx-dictionary-mode fundamental-mode "osx-dictionary"
  "Major mode to look up word through dictionary.
\\{osx-dictionary-mode-map}.
Turning on Text mode runs the normal hook `osx-dictionary-mode-hook'."

  (setq header-line-format (center-header osx-dictionary-mode-header-line))
  (setq font-lock-defaults '(osx-dictionary-mode-font-lock-keywords)))
#+end_src

Key bindings.

#+begin_src emacs-lisp :tangle yes
(add-hook 'osx-dictionary-mode-hook
          #'(lambda ()
              (evil-local-set-key 'normal (kbd "q") #'osx-dictionary-quit)))
#+end_src

Evil leader key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref dictionary-leader
(evil-leader/set-key "d" #'osx-dictionary-search-input)
#+end_src

** External applications

*** Zoom

Open Zoom links directly.

#+begin_src emacs-lisp :tangle yes
(defun follow-zoom-link (link-url)
  "Open zoommtg:// links."
  (shell-command (format "open 'zoommtg:%s'" link-url)))


(org-link-set-parameters "zoommtg" :follow #'follow-zoom-link)
#+end_src

*** Maxwell

For capturing drawings and diagrams:

#+begin_src emacs-lisp :tangle yes
(defun maxwell-create-link ()
  (interactive)
  (if (not (file-exists-p "mxl"))
      (make-directory "mxl"))
  (let* ((cwd (file-name-directory buffer-file-name))
         (name (make-temp-name "diagram_"))
         (image-path (concat cwd (file-name-as-directory "mxl") name ".png")))
    (shell-command
     (format
      "python -c 'from maxwell import capture_area; capture_area(\"%s\")'"
      image-path))
    (select-frame-set-input-focus (selected-frame))
    (insert (format "#+attr_latex: :scale .7\n[[%s]]\n\n" image-path))
    (org-remove-inline-images)))


(define-key org-mode-map (kbd "<f7>") #'maxwell-create-link)
#+end_src

Prompt for writing Latex.

#+begin_src emacs-lisp :tangle yes
(define-minor-mode maxwell-get-latex-prompt-mode
  "Minor mode to simulate buffer local keybindings."
  :init-value nil
  :keymap (make-keymap))


(define-key maxwell-get-latex-prompt-mode-map (kbd "C-j")
            #'(lambda ()
                (interactive)
                (write-file (expand-file-name "~/temp.org"))
                (kill-buffer)
                (delete-frame)
                (shell-command-to-string "osascript -e 'activate application \"Electron\"'")))


(defun maxwell-get-latex-prompt ()
  (let ((should-center-frame nil))
    (make-frame `((width . 50)
                  (height . 13)
                  (left . ,(- (round (/ (display-pixel-width) 2)) 202))
                  (top . -200)))
    (set-frame-parameter nil 'height 5)
    (set-frame-parameter nil 'top -100))
  (select-frame-set-input-focus (selected-frame))
  (switch-to-buffer "*Prompt*")
  (erase-buffer)
  (org-mode)
  (setq-local olivetti-body-width 40)
  (maxwell-get-latex-prompt-mode)
  (yas-expand-snippet "\\\\( $0 \\\\)")
  (evil-insert-state))
#+end_src

** References

Use org-ref for references management.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-references
(use-package org-ref
  :config

  (require 'bibtex)
  (require 'org-ref-pdf)
  (require 'org-ref-url-utils)
  (require 'org-ref-bibtex)
  (require 'org-ref-isbn)

  (setq-default bibtex-autokey-year-length 4
                bibtex-autokey-name-year-separator "-"
                bibtex-autokey-year-title-separator "-"
                bibtex-autokey-titleword-separator "-"
                bibtex-autokey-titlewords 2
                bibtex-autokey-titlewords-stretch 1
                bibtex-autokey-titleword-length 5)

  (define-key org-mode-map (kbd "C-]") #'org-ref-insert-link))
#+end_src

Format citation candidates properly.

#+begin_src emacs-lisp :tangle yes
(defun org-ref-read-key ()
  "Read a key with completion."
  (unless bibtex-completion-display-formats-internal
    (bibtex-completion-init))
  (let* ((bibtex-completion-bibliography (org-ref-find-bibliography))
	 (candidates (mapcar (lambda (entry)
			       (cons (bibtex-completion-format-entry entry (- (frame-width) 4))
				     (cdr entry)))
			     (bibtex-completion-candidates)))
	 (choice (completing-read "org-ref BibTeX entries: " candidates)))
    (cdr (assoc "=key=" (assoc choice candidates)))))
#+end_src

BibTeX key bindings.

#+begin_src emacs-lisp :tangle yes
(evil-define-key 'normal bibtex-mode-map (kbd "C-]") #'doi-insert-bibtex)
(evil-define-key 'insert bibtex-mode-map (kbd "C-]") #'doi-insert-bibtex)
#+end_src

** Export

Latex export options.

#+begin_src emacs-lisp :tangle yes
(setq org-latex-default-packages-alist '())


(add-to-list 'org-latex-classes
             `("assignment"
               ,(concat
                 "\\documentclass[a4paper,12pt]{article}\n"
                 "\\usepackage[doublespacing]{setspace}\n"
                 "\\usepackage[margin=1in]{geometry}\n"
                 "\\usepackage{csquotes}\n"
                 "\\usepackage{amsmath}\n"
                 "\\usepackage{graphicx}\n"
                 "\\usepackage[hidelinks]{hyperref}\n"
                 "\\usepackage[style=apa,backend=biber]{biblatex}\n"
                 "\\usepackage[small]{titlesec}\n"
                 "[NO-DEFAULT-PACKAGES]"
                 "[PACKAGES]"
                 "[EXTRA]")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


(add-to-list 'org-latex-classes
             `("apa6"
               ,(concat
                 "\\documentclass[a4paper,man]{apa6}\n"
                 "\\usepackage{csquotes}\n"
                 "\\usepackage{graphicx}\n"
                 "\\usepackage[hidelinks]{hyperref}\n"
                 "\\usepackage[style=apa,backend=biber]{biblatex}\n"
                 "\\renewcommand*{\\finalnamedelim}{ \\ifnumgreater{\\value{liststop}}{2}{\\finalandcomma}{} \\addspace\\&\\space}\n"
                 "\\usepackage[skip=0pt]{parskip}\n"
                 "[NO-DEFAULT-PACKAGES]"
                 "[PACKAGES]"
                 "[EXTRA]")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


(add-to-list 'org-latex-classes
             `("math-document"
               ,(concat
                 "\\documentclass[a4paper,12pt,oneside]{book}\n"
                 "\\usepackage[margin=1in]{geometry}\n"
                 "\\usepackage{csquotes}\n"
                 "\\usepackage{amsmath}\n"
                 "\\usepackage{amssymb}\n"
                 "\\usepackage{graphicx}\n"
                 "\\usepackage[hidelinks]{hyperref}\n"
                 "\\usepackage{fancyhdr}\n"
                 "\\usepackage[explicit]{titlesec}\n"

                 "\\titleformat{\\chapter}{\\normalfont\\huge\\bfseries}{#1}{}{}\n"
                 "\\titleformat{\\section}{\\normalfont\\large\\bfseries}{\\thesection.}{.5em}{#1}\n"

                 "\\titlespacing{\\chapter}{0pt}{0pt}{1em}\n"

                 "\\usepackage{amsthm}\n"
                 "\\setlength{\\parskip}{.5em}\n"
                 "\\setlength{\\parindent}{0pt}\n"
                 "\\newtheoremstyle{boxed}{8pt}{8pt}{}{}{\\upshape\\bfseries}{.}{.5em}{}\n"
                 "\\theoremstyle{boxed}\n"
                 "\\newtheorem{theorem}{Theorem}\n"
                 "\\newtheorem{note}{Note}\n"
                 "\\newtheorem{exmp}{Example}\n"
                 "\\newtheorem{corollary}{Corollary}\n"
                 "\\newtheorem{exercise}{Exercise}\n"
                 "\\newtheorem{definition}{Definition}\n"
                 "\\newtheorem{lemma}{Lemma}[theorem]\n"
                 "\\usepackage{mdframed}\n"
                 "\\BeforeBeginEnvironment{theorem}{\\begin{mdframed}}\n"
                 "\\AfterEndEnvironment{theorem}{\\end{mdframed}}\n"
                 "\\BeforeBeginEnvironment{corollary}{\\begin{mdframed}}\n"
                 "\\AfterEndEnvironment{corollary}{\\end{mdframed}}\n"
                 "\\BeforeBeginEnvironment{exmp}{\\begin{mdframed}}\n"
                 "\\AfterEndEnvironment{exmp}{\\end{mdframed}}\n"
                 "\\BeforeBeginEnvironment{exercise}{\\begin{mdframed}}\n"
                 "\\AfterEndEnvironment{exercise}{\\end{mdframed}}\n"
                 "\\BeforeBeginEnvironment{definition}{\\begin{mdframed}}\n"
                 "\\AfterEndEnvironment{definition}{\\end{mdframed}}\n"
                 "\\pagestyle{fancy}\n"
                 "\\fancyhf{}\n"

                 "\\renewcommand{\\chaptermark}[1]{\\markboth{#1}{}}\n"
                 "\\renewcommand{\\sectionmark}[1]{\\markright{SECTION \\thesection. \\uppercase{#1}}}\n"

                 "\\let\\oldtitle\\title\n"
                 "\\renewcommand{\\title}[1]{\\oldtitle{#1}\\def\\titletext{#1}}\n"
                 "\\fancyhead[L]{\\leftmark}\n"
                 "\\fancyhead[R]{\\titletext}\n"
                 "\\fancyfoot[C]{\\rightmark}\n"
                 "\\fancyfoot[R]{\\thepage}\n"
                 "[NO-DEFAULT-PACKAGES]"
                 "[PACKAGES]"
                 "[EXTRA]")
               ("\\chapter{%s}" . "\\chapter{%s}")
               ("\\section{%s}" . "\\section{%s}")
               ("\\subsection{%s}" . "\\subsection{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection{%s}")
               ("\\paragraph{%s}" . "\\paragraph{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph{%s}")))
#+end_src

Custom export functions.

#+begin_src emacs-lisp :tangle yes
(defun export-and-open-html ()
  "Export \"org-mode\" file to HTML and open it."
  (interactive)
  (shell-command (format "open -a Vivaldi '%s'" (org-html-export-to-html))))


(defvar org-pdf-through-latex t
  "Export \"org-mode\" file to latex before converting to PDF. Otherwise, convert to HTML first.")


(defun export-and-open-pdf (separate-window)
  "Export \"org-mode\" file to PDF, then preview."
  (interactive)
  (let ((output-path (format "%s.pdf" (file-name-sans-extension (buffer-file-name)))))
    (if org-pdf-through-latex
        (shell-command-to-string
         (format
          "latexmk -pdf -jobname=temp -f %s; rm *.aux *.fls *.log *.out *.fdb_latexmk; mv temp.pdf '%s'"
          (org-latex-export-to-latex)
          output-path))
      (shell-command-to-string (format
                                "wkhtmltopdf --disable-smart-shrinking %s %s"
                                (org-html-export-to-html) output-path)))
    (if separate-window
        (find-file-other-window output-path)
      (find-file output-path))))


(defvar org-pdf-export-running nil)


(defun org-export-pdf-update ()
  "Export \"org-mode\" file to PDF in background."
  (interactive)

  (when (not org-pdf-export-running)
    (setq org-pdf-export-running t)
    (let* ((output-path (format "%s.pdf" (file-name-sans-extension (buffer-file-name))))
           (output-buffer (generate-new-buffer "*Async shell command*"))
           (inhibit-message t)
           (proc (save-window-excursion
                   (async-shell-command
                    (format
                     "latexmk -pdf -jobname=temp -f %s; rm *.aux *.fls *.log *.out *.fdb_latexmk; mv temp.pdf '%s'"
                     (org-latex-export-to-latex)
                     output-path)
                    output-buffer)
                   (get-buffer-process output-buffer))))
      (if (process-live-p proc)
        (set-process-sentinel proc #'(lambda (process signal)
                                       (when (memq (process-status process) '(exit signal))
                                         (setq org-pdf-export-running nil)
                                         (kill-buffer "*Async shell command*")
                                         (shell-command-sentinel process signal))))))))
#+end_src

Add head to org mode HTML export.

#+begin_src javascript :tangle no :noweb-ref org-html-export-head-script
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('table.currency td.org-right').forEach(elem => {
        const text = elem.innerText;
        if (!isNaN(text)) {
            let num = (Math.round(parseFloat(text) * 100) / 100).toFixed(2);
            elem.innerText = '$' + num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');
        }
    });
});
#+end_src

#+begin_src emacs-lisp :tangle yes :noweb no-export
;; org-mode custom HTML head export
(defun org-html-export-head-hook (exporter)
  "Insert custom inline css."
  (when (eq exporter 'html)
    (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (concat dir "style.css"))
           (homestyle (or (null dir) (null (file-exists-p path))))
           (final (if homestyle "~/.org_style.css" path)))
      (setq org-html-head-include-default-style nil)
      (setq org-html-head (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n"
                           "<script>\n"
                           "
<<org-html-export-head-script>>
"
                           "</script>")))))


(add-hook 'org-export-before-processing-hook #'org-html-export-head-hook)
#+end_src

Color quote in org mode and export to HTML (English class).

#+begin_src emacs-lisp :tangle yes
(defun export-colored (num simple-separatorp)
  (interactive
   (list
    (read-number "How many people? ")
    (y-or-n-p "Use simple separators? ")))
  (if (equal major-mode 'org-mode)
      (progn
        (shell-command (format "~/tcolor %s %s %s" (buffer-file-name) num simple-separatorp))
        (let ((old-buffer-path (buffer-file-name)))
          (with-current-buffer (find-file-noselect (with-temp-buffer
                                                     (insert old-buffer-path)
                                                     (goto-char (point-min))
                                                     (replace-regexp "\\(.+\\)\\.org" "\\1_color.org")
                                                     (buffer-string)))
            (shell-command (format "open %s" (org-html-export-to-html))))))
    (message "Please make sure this a `.org` file.")))
#+end_src

** Miscellaneous

Other config. Limit this section as much as possible.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-config
;; disable company mode for org-mode
(add-hook 'org-mode-hook #'(lambda () (company-mode -1)))


;; make sure M-h binding works
(add-hook 'org-mode-hook
          (lambda ()
            (define-key org-mode-map "\M-h" nil)
            (global-set-key (kbd "M-h") 'evil-window-left)))


;; open link in the same window
(add-to-list 'org-link-frame-setup '(file . find-file))

;; quick-calc
(defun clean-quick-calc (start end)
  (interactive
   (if (region-active-p)
       (list (region-beginning) (region-end))
     '(nil nil)))

  (if (null start)
      (with-temp-buffer
        (quick-calc nil)
        (kill-ring-save (point-min) (point-max)))
    (progn
      (let ((expression (replace-regexp-in-string
                         "\\([abcxyz]\\|_[[:digit:]]\\)[[:space:]]*("
                         "\\1*("
                         (buffer-substring start end))))
        (delete-region start (if (and (equal (evil-visual-type) 'line)
                                      (not (equal end (point-max))))
                                 (- end 1) end))
        (save-excursion
          (goto-char start)
          (insert (calc-eval expression)))))))

(define-key global-map (kbd "C-'") #'clean-quick-calc)
(define-key org-mode-map (kbd "C-'") #'clean-quick-calc)

(add-hook 'calc-mode-hook #'(lambda ()
                              (calc-latex-language nil)
                              (calc-radians-mode)))

;; recalculate table
(define-key org-mode-map (kbd "C-M-'") #'org-table-recalculate)


;; recalculate table
(define-key org-mode-map (kbd "C-M-;") #'(lambda ()
                                           (interactive)
                                           (org-table-eval-formula '(4))))


;; clear field
(define-key org-mode-map (kbd "C-c SPC") #'org-table-blank-field)


;; disable pairing for single quotes
(sp-local-pair 'org-mode "'" nil :actions nil)


;; create a definition for a term in notes
(defun org-note-create-definition (start end)
  (interactive "r")
  (let ((old-point (point))
        (inhibit-message t))
    (if (use-region-p)
        (let* ((text (buffer-substring start end))
               (title (concat (upcase (substring text 0 1)) (substring text 1))))
          (replace-region-contents start end
                                   (lambda ()
                                     (format "[[*%s][%s]]" title text)))
          (goto-char (point-max))
          (yas-expand-snippet
           (format
            "\n%s ${1:%s}\n\n$2/${1:$(if (or (not (yas-field-value 2)) (equal (yas-field-value 2) \"\")) yas-text (downcase yas-text))}/ $0 (${3:$$(yas-choose-value '(\"pow. \" \"mor. \" \"grim. \" \"hom. \" \"stew.\" \"lect. \"))})"
            (org-heading-asterisks) title)
           (point-max))
          (evil-insert-state))
      (goto-char (point-max))
      (yas-expand-snippet
       "\n`(org-heading-asterisks)` $1\n\n$2/${1:$(if (equal (yas-field-value 2) \"\") yas-text (downcase yas-text))}/ $0 (${3:$$(yas-choose-value '(\"pow. \" \"mor. \" \"grim. \" \"hom. \" \"stew.\" \"lect. \"))})"
       (point-max))
      (evil-insert-state))
    (org-mark-ring-push old-point)))


;; function for how many asterisks required to create heading
(defun org-heading-asterisks ()
  (make-string (if (> (org-outline-level) 0)
                   (max (org-outline-level) 2)
                 1) ?*))
#+end_src

* Ichthys

Also known as <><, this is a scripture-finding mode I wrote.

Relevant config.

#+begin_src emacs-lisp :tangle yes
(use-package ichthys-mode
  :load-path "lisp/"
  :config
  ;; binding to insert link in org-mode
  (define-key org-mode-map (kbd "C-c i") #'ichthys/insert-link)

  ;; create a ring for Portuguese and English scriptures
  (ichthys/create-lang-ring
   "~/Documents/Church/Ichthys/Emacs/Portuguese"
   "~/Documents/Church/Ichthys/Emacs/English")

  ;; use <f9> to cycle between languages
  (define-key global-map (kbd "<f9>") #'ichthys/lang-ring-next))
#+end_src

* Games

** Gomoku

Style configuration.

#+begin_src emacs-lisp :tangle yes
(use-package gomoku
  :config
  (set-face-attribute 'gomoku-O nil
                      :weight 'bold
                      :foreground "#cc6666")

  (set-face-attribute 'gomoku-X nil
                      :weight 'bold
                      :foreground "#6ca17a"))
#+end_src

** Pong

#+begin_src emacs-lisp :tangle yes
(use-package pong
  :config
  (define-key pong-mode-map (kbd "s") #'pong-move-left)
  (define-key pong-mode-map (kbd "d") #'pong-move-right)
  (define-key pong-mode-map (kbd "k") #'pong-move-up)
  (define-key pong-mode-map (kbd "j") #'pong-move-down))
#+end_src

* Miscellaneous

For uncategorized config. Avoid adding to this section.

#+begin_src emacs-lisp :tangle yes
;; configure .curve for json
(add-to-list 'auto-mode-alist '("\\.curve\\'" . json-mode))


;; remove bell sound
(setq-default ring-bell-function 'ignore)


;; delete a file by moving it to trash
(setq-default delete-by-moving-to-trash t)
(setq-default trash-directory "~/.Trash")


;; stop making backup files
(setq-default make-backup-files nil)
#+end_src

** Calendar

Add Brazilian holidays to calendar.

#+begin_src emacs-lisp :tangle yes
(require 'calendar)
(require 'holidays)


(defvar brazil-holidays
  '((holiday-fixed 1 1 "Ano Novo")
    (holiday-easter-etc -47 "Carnaval")
    (holiday-easter-etc -2 "Paixão de Cristo")
    (holiday-easter-etc 0 "Páscoa")
    (holiday-fixed 4 21 "Tiradentes")
    (holiday-fixed 5 1 "Dia do Trabalhador")
    (holiday-easter-etc +60 "Corpus Christi")
    (holiday-fixed 9 7 "Dia da Independência do Brasil")
    (holiday-fixed 10 12 "Nossa Senhora Aparecida")
    (holiday-fixed 11 2 "Finados")
    (holiday-fixed 11 15 "Proclamação da República")
    (holiday-fixed 12 25 "Natal"))
  "Brazillian holidays.")


(setq-default calendar-holidays (append calendar-holidays brazil-holidays))
#+end_src

Key bindings.

#+begin_src emacs-lisp :tangle yes
(add-hook 'calendar-mode-hook #'(lambda ()
                                  (evil-local-set-key 'normal (kbd "q") #'(lambda ()
                                                                            (interactive)
                                                                            (calendar-exit t)))))
#+end_src

Evil leader key bindings.

#+begin_src emacs-lisp :tangle no :noweb-ref calendar-leader
(evil-leader/set-key "DEL" #'calendar)
#+end_src

** Mac-specific

Use =command= key as =meta=.

#+begin_src emacs-lisp :tangle yes
(setq-default mac-command-modifier 'meta)
#+end_src

Reveal in Finder.

#+begin_src emacs-lisp :tangle yes
(use-package reveal-in-osx-finder)
#+end_src

Make sure frame is not fullscreen before quitting (causes Emacs to
crash).

#+begin_src emacs-lisp :tangle yes
(defun before-evil-quit (orig-fun &rest args)
  "Work around macOS fullscreen quit crash."
  (if (one-window-p)
      (set-frame-parameter nil 'fullscreen nil)))
(advice-add 'evil-quit :before #'before-evil-quit)
#+end_src

Evil leader keybindings.

#+begin_src emacs-lisp :tangle no :noweb-ref mac-leader
(evil-leader/set-key "R" 'reveal-in-osx-finder)
#+end_src

** Edit with Emacs

Use GhostText to edit with Emacs.

#+begin_src emacs-lisp :tangle yes
(use-package atomic-chrome
  :config
  (setq-default atomic-chrome-buffer-open-style 'full)


  (atomic-chrome-start-server))
#+end_src

